  
CREATE PROCEDURE DatahubPMR.GET_ASSET_RAW_DETAILS      
AS       
-- =============================================    
-- Author:  <Author,Manoj Negi>      
-- Create date: <Create Date, 3rd February 2023>    
/*    
EXEC DatahubPMR.GET_ASSET_RAW_DETAILS    
*/    
-- Description: <Portfolio management: Asset raw detail>    
-- The purpose of this procedure is to fetch Asset raw details     
-- ---------------------------------------------------------------------------------------------      
     
--      
--    Date        Version    Who        Control        Comment      
-- ----------    -------    -------    -----------    ----------------------------------------------------      
-- 16/02/2023       V1       Manoj                   Initial Version      
-- 16/02/2023       V2       Manoj                   Added 'UID' logic for Uniqueness    
-- 16/02/2023       V3       Manoj                   Added 'CRC' logic for Increamental    
-- 08/08/2023       V4       Manoj                   Added Asset DESC logic change    
-- 24/01/2024       V5       Manoj                   Changes suggest by odessa team in asset status logic.    
-- 21/02/2024       V6       Manoj                   Fetch vendor company name and vendor company id for migrated contracts from DW Database.    
-- 21/02/2024       V7       Manoj                   Change in net_book_value logic now Net Book Value should be displayed regardless of status.    
-- 17/07/2024  V8       Veeran                  Removed the batch logic and added few indexes to improve the performance.  
-- 28/08/2024  V9       Veeran                  Added Few aditional logic to populate Dervied Gen tables and Batch Process  
-- ------------------------------------------------------------------------------------------------------    
-- =============================================    
BEGIN      
   
  
DECLARE @ERROR_HANDLER INT  
DECLARE @COUNT_HANDLER INT   
  
DECLARE @JOBINSTANCEID BIGINT = 1   
DECLARE @ROWSPROCESSED BIGINT = 0    
  
DECLARE   @REPORTLOGID INT = 0    
                                                           
DECLARE @NUMROWSINSERTED BIGINT = 0    
DECLARE @NUMROWSUPDATED BIGINT = 0   
  
DECLARE @JOBSTARTEDEXECUTING DATETIME  
SET @JOBSTARTEDEXECUTING = GETDATE()  
   
---------------------------------------------------------------- Load PICKUP_DATE of contract----------------------------------------------------------  
--DECLARE @PICKUP_To_DATE DATETIME   
--SET @PICKUP_To_DATE = '2024-08-22 05:00:00.000'   
--DECLARE @PICKUP_From_DATE DATETIME   
--SELECT @PICKUP_From_DATE = dateadd(day,1, @PICKUP_To_DATE)  
    
   
DECLARE @PICKUP_FROM_DATE DATETIME   
SET @PICKUP_FROM_DATE =    
(  
SELECT TOP 1   
CASE WHEN STARTTIME IS NOT NULL AND ENDTIME IS NOT NULL AND STATUSTYPEID = 1 THEN ENDTIME    
 ELSE   
 CASE WHEN STARTTIME IS NOT NULL     AND ENDTIME IS NULL  
 THEN (  
  SELECT TOP 1 ENDTIME   FROM [DBO].[REPORT_LOGS]  B (nolock) WHERE PROCESSNAME = 'SYNC ASSET_SUMMARY_LOAD_IDS_TARGET'   AND ENDTIME IS NOT NULL   
  AND ISNULL(ISERROR,0) <> 1 AND STATUSTYPEID = 1 ORDER BY STARTTIME ASC )     END   
  END AS 'PICKUP_DATE'  
  
FROM [DBO].[REPORT_LOGS]   B (nolock)   
WHERE B.PROCESSNAME = 'SYNC ASSET_SUMMARY_LOAD_IDS_TARGET'   
GROUP BY STARTTIME,ENDTIME ,STATUSTYPEID  
ORDER BY 1 DESC  
)    
  
   
----------------------------------------------------------------  Actual load of contract----------------------------------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate(),'PMR'  
,'#CONTRACT_LOAD'  
,'#CONTRACT_LOAD DATA INSETION')  
  
IF OBJECT_ID(N'TEMPDB..#CONTRACT_LOAD')  IS NOT NULL    
        BEGIN    
           DROP TABLE #CONTRACT_LOAD  
        END   
  
                   SELECT        DISTINCT   CONTRACTS.ID AS CONTRACTID ,CONVERT(DATETIME,(SELECT MAX(T.UPDATEDTIME)  FROM (      
                   VALUES ( ISNULL(CONTRACTS.LASTREFRESHTIME,CONTRACTS.UPDATEDTIME)),     
                   ( ISNULL(CONTRACTS.UPDATEDTIME,CONTRACTS.CREATEDTIME)),  
       ( ISNULL(LEASEFINANCES.LASTREFRESHTIME,LEASEFINANCES.UPDATEDTIME)),  
                   ( ISNULL(LEASEFINANCES.UPDATEDTIME,LEASEFINANCES.CREATEDTIME)),         
                   ( ISNULL(LEASEFINANCEDETAIL.LASTREFRESHTIME,LEASEFINANCEDETAIL.UPDATEDTIME)),  
                   ( ISNULL(LEASEFINANCEDETAIL.UPDATEDTIME,LEASEFINANCEDETAIL.CREATEDTIME)),   
                   ( ISNULL(ASSETS.LASTREFRESHTIME,ASSETS.UPDATEDTIME)),    
                   ( ISNULL(ASSETS.UPDATEDTIME,ASSETS.CREATEDTIME)),      
                   ( ISNULL(LEASEASSETS.LASTREFRESHTIME,LEASEASSETS.UPDATEDTIME)),    
                   ( ISNULL(LEASEASSETS.UPDATEDTIME,LEASEASSETS.CREATEDTIME))   ) AS T( UPDATEDTIME ))) LASTREFRESHDATE  
                   INTO          #CONTRACT_LOAD  
                   FROM          DATAHUB_ODESSA.ODH.CONTRACTS CONTRACTS WITH (NOLOCK)  
                   INNER JOIN    DATAHUB_ODESSA.ODH.LEASEFINANCES LEASEFINANCES WITH (NOLOCK) ON LEASEFINANCES.CONTRACTID = CONTRACTS.ID AND ISCURRENT=1  
                   INNER JOIN    DATAHUB_ODESSA.ODH.LEASEFINANCEDETAILS LEASEFINANCEDETAIL WITH (NOLOCK) ON LEASEFINANCEDETAIL.ID = LEASEFINANCES.ID  
                   INNER JOIN    DATAHUB_ODESSA.ODH.LEASEASSETS LEASEASSETS WITH (NOLOCK) ON LEASEASSETS.LEASEFINANCEID = LEASEFINANCES.ID   
                   INNER JOIN    DATAHUB_ODESSA.ODH.ASSETS ASSETS WITH(NOLOCK) ON ASSETS.ID = LEASEASSETS.ASSETID  
                   WHERE   
                   CONVERT(DATETIME,(SELECT MAX(T.UPDATEDTIME)  FROM (      
                   VALUES ( ISNULL(CONTRACTS.LASTREFRESHTIME,CONTRACTS.UPDATEDTIME)),     
                   ( ISNULL(CONTRACTS.UPDATEDTIME,CONTRACTS.CREATEDTIME)),  
       ( ISNULL(LEASEFINANCES.LASTREFRESHTIME,LEASEFINANCES.UPDATEDTIME)),  
                   ( ISNULL(LEASEFINANCES.UPDATEDTIME,LEASEFINANCES.CREATEDTIME)),         
                   ( ISNULL(LEASEFINANCEDETAIL.LASTREFRESHTIME,LEASEFINANCEDETAIL.UPDATEDTIME)),  
                   ( ISNULL(LEASEFINANCEDETAIL.UPDATEDTIME,LEASEFINANCEDETAIL.CREATEDTIME)),   
                   ( ISNULL(ASSETS.LASTREFRESHTIME,ASSETS.UPDATEDTIME)),    
                   ( ISNULL(ASSETS.UPDATEDTIME,ASSETS.CREATEDTIME)),      
                   ( ISNULL(LEASEASSETS.LASTREFRESHTIME,LEASEASSETS.UPDATEDTIME)),    
                   ( ISNULL(LEASEASSETS.UPDATEDTIME,LEASEASSETS.CREATEDTIME))   ) AS T( UPDATEDTIME ))) > @PICKUP_FROM_DATE   
  
CREATE NONCLUSTERED INDEX [CONTRACT_LOAD_INDX_CONTRACTID]  
ON #CONTRACT_LOAD ([CONTRACTID])   
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#ACTUAL_LOAD_RC'  
,'#ACTUAL_LOAD_RC DATA INSETION')  
  
  
IF OBJECT_ID(N'TEMPDB..#ACTUAL_LOAD_RC')  IS NOT NULL    
        BEGIN    
            DROP TABLE #ACTUAL_LOAD_RC    
        END  
  
 SELECT            
 DISTINCT RECEIVABLE.ENTITYID AS CONTRACTID ,CONVERT(DATETIME,(SELECT MAX(T.UPDATEDTIME)  FROM (      
                   VALUES ( ISNULL(RECEIVABLEDETAIL.LASTREFRESHTIME,RECEIVABLEDETAIL.UPDATEDTIME)),     
                          ( ISNULL(RECEIVABLEDETAIL.UPDATEDTIME,RECEIVABLEDETAIL.CREATEDTIME)),   
                          ( ISNULL(RECEIVABLEINVOICEDETAIL.LASTREFRESHTIME,RECEIVABLEINVOICEDETAIL.UPDATEDTIME)),  
                          ( ISNULL(RECEIVABLEINVOICEDETAIL.UPDATEDTIME,RECEIVABLEINVOICEDETAIL.CREATEDTIME)),   
                          ( ISNULL(RECEIVABLEINVOICE.LASTREFRESHTIME,RECEIVABLEINVOICE.UPDATEDTIME)),    
                          ( ISNULL(RECEIVABLEINVOICE.UPDATEDTIME,RECEIVABLEINVOICE.CREATEDTIME)),      
                          ( ISNULL(RECEIVABLE.LASTREFRESHTIME,RECEIVABLE.UPDATEDTIME)),    
                          ( ISNULL(RECEIVABLE.UPDATEDTIME,RECEIVABLE.CREATEDTIME))        
                     ) AS T( UPDATEDTIME ))) LASTREFRESHDATE  
  
                   INTO                 #ACTUAL_LOAD_RC  
                   FROM                 DATAHUB_ODESSA.ODH.RECEIVABLEDETAILS RECEIVABLEDETAIL WITH (NOLOCK)        
                   INNER JOIN           DATAHUB_ODESSA.ODH.RECEIVABLEINVOICEDETAILS RECEIVABLEINVOICEDETAIL WITH (NOLOCK)        
                   ON                   RECEIVABLEINVOICEDETAIL.RECEIVABLEDETAILID = RECEIVABLEDETAIL.ID AND RECEIVABLEINVOICEDETAIL.ISACTIVE = 1      
  
                   INNER JOIN           DATAHUB_ODESSA.ODH.RECEIVABLEINVOICES RECEIVABLEINVOICE WITH (NOLOCK)        
                   ON                   RECEIVABLEINVOICEDETAIL.RECEIVABLEINVOICEID = RECEIVABLEINVOICE.ID AND RECEIVABLEINVOICE.ISACTIVE = 1      
  
                   INNER JOIN           DATAHUB_ODESSA.ODH.RECEIVABLES RECEIVABLE WITH (NOLOCK)        
                   ON                   RECEIVABLEDETAIL.RECEIVABLEID = RECEIVABLE.ID AND RECEIVABLE.ISACTIVE = 1 AND RECEIVABLE.ISDUMMY=0 AND RECEIVABLE.ENTITYTYPE='CT'  
         
        WHERE (  
       CONVERT(DATETIME,(SELECT MAX(T.UPDATEDTIME)  FROM (      
                   VALUES ( ISNULL(RECEIVABLEDETAIL.LASTREFRESHTIME,RECEIVABLEDETAIL.UPDATEDTIME)),     
                          ( ISNULL(RECEIVABLEDETAIL.UPDATEDTIME,RECEIVABLEDETAIL.CREATEDTIME)),   
                          ( ISNULL(RECEIVABLEINVOICEDETAIL.LASTREFRESHTIME,RECEIVABLEINVOICEDETAIL.UPDATEDTIME)),  
                          ( ISNULL(RECEIVABLEINVOICEDETAIL.UPDATEDTIME,RECEIVABLEINVOICEDETAIL.CREATEDTIME)),   
                          ( ISNULL(RECEIVABLEINVOICE.LASTREFRESHTIME,RECEIVABLEINVOICE.UPDATEDTIME)),    
                          ( ISNULL(RECEIVABLEINVOICE.UPDATEDTIME,RECEIVABLEINVOICE.CREATEDTIME)),      
                          ( ISNULL(RECEIVABLE.LASTREFRESHTIME,RECEIVABLE.UPDATEDTIME)),    
                          ( ISNULL(RECEIVABLE.UPDATEDTIME,RECEIVABLE.CREATEDTIME))       
                     ) AS T( UPDATEDTIME ))) > @PICKUP_FROM_DATE )   
  
CREATE NONCLUSTERED INDEX [ACTUAL_LOAD_RC_INDX_CONTRACTID]  
ON #ACTUAL_LOAD_RC ([CONTRACTID])   
  
IF OBJECT_ID(N'TEMPDB..#ACTUAL_LOAD_BATCH')  IS NOT NULL    
BEGIN    
    DROP TABLE #ACTUAL_LOAD_BATCH    
END  
  
SELECT CONTRACTID,LASTREFRESHDATE INTO #ACTUAL_LOAD_BATCH FROM(  
                             SELECT CONTRACTID,LASTREFRESHDATE FROM #ACTUAL_LOAD_RC  
                             UNION  
                             SELECT CONTRACTID,LASTREFRESHDATE  FROM #CONTRACT_LOAD  
                         )FINALCONTRACT  
CREATE NONCLUSTERED INDEX [ACTUAL_LOAD_INDX_CONTRACTID]  
ON #ACTUAL_LOAD_BATCH ([CONTRACTID])   
  
  
DECLARE @LASTREFRESHDATE DATETIME   
SELECT @LASTREFRESHDATE = (SELECT MAX(LASTREFRESHDATE)  FROM  #ACTUAL_LOAD_BATCH (nolock))    
  
DECLARE @PICKUP_TO_DATE DATETIME   
SELECT @PICKUP_TO_DATE=(  
SELECT   
CASE   
WHEN  DATEDIFF(DAY,@PICKUP_FROM_DATE, @LASTREFRESHDATE) > 3 THEN  DATEADD(DAY, 3, @PICKUP_FROM_DATE)   ---IF LAST RUN MORE THAN 3 DAY  THEN PROCESS ONLY THREE DAY  
WHEN  DATEDIFF(DAY,@PICKUP_FROM_DATE, @LASTREFRESHDATE) > 2 THEN  DATEADD(DAY, 2, @PICKUP_FROM_DATE)   ---IF LAST RUN MORE THAN 2 DAY  THEN PROCESS ONLY TWO DAY    
ELSE  @LASTREFRESHDATE                       ---IF LAST RUN MORE THAN 0 DAY  THEN PROCESS BETWEEN ONE TO TWO DAYS  
END )  
  
  
 ------------------- Required Loading of Contract table ------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#CONTRACTS_BATCH'  
,'#CONTRACTS_BATCH DATA INSETION')  
    
  IF OBJECT_ID(N'TEMPDB..#CONTRACTS_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #CONTRACTS_BATCH  
  END  
        SELECT  CT.ID,CT.SEQUENCENUMBER,CURRENCYID,ORIGINALCONTRACTID,DEALPRODUCTTYPEID,CT.STATUS,CT.LASTREFRESHTIME,CT.UPDATEDTIME,CT.CREATEDTIME,CT.EXTERNALREFERENCENUMBER    
        INTO    #CONTRACTS_BATCH  
        FROM DATAHUB_ODESSA.ODH.CONTRACTS(NOLOCK) CT  
       INNER JOIN   
    #ACTUAL_LOAD_BATCH AL (nolock) ON AL.CONTRACTID= CT.ID  
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN  
  CREATE CLUSTERED INDEX [CONTRACTS_INDX_ID]  
  ON #CONTRACTS_BATCH ([ID])   
 ---------------------------------------------- Full Loading of Contract table ------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#CONTRACTS_FULL_BATCH'  
,'#CONTRACTS_FULL_BATCH DATA INSERTITION')  
  
  IF OBJECT_ID(N'TEMPDB..#CONTRACTS_FULL_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #CONTRACTS_FULL_BATCH  
  END  
        SELECT  CT.ID,CT.SEQUENCENUMBER,CURRENCYID,ORIGINALCONTRACTID,DEALPRODUCTTYPEID,CT.STATUS,CT.LASTREFRESHTIME,CT.UPDATEDTIME,CT.CREATEDTIME,CT.EXTERNALREFERENCENUMBER    
        INTO    #CONTRACTS_FULL_BATCH  
        FROM DATAHUB_ODESSA.ODH.CONTRACTS(NOLOCK) CT  
  
  CREATE CLUSTERED INDEX [CONTRACTS_FULL_INDX_ID]  
  ON #CONTRACTS_FULL_BATCH ([ID])   
  --CREATE NONCLUSTERED INDEX [CONTRACTS_FULL_INDX_ORIGINALCONTRACTID]  
  --ON #CONTRACTS_FULL ([ORIGINALCONTRACTID])  
  
  IF OBJECT_ID(N'TEMPDB..#LEASEFINANCEDETAILS_FULL_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #LEASEFINANCEDETAILS_FULL_BATCH  
  END  
        SELECT  LFD.ID,ISCREATEDTHROUGHPAYOFFEXTENSION,MATURITYDATE,ISOVERTERMLEASE,RENT_AMOUNT,ISREGULARPAYMENTSTREAM,LFD.LASTREFRESHTIME,LFD.UPDATEDTIME,LFD.CREATEDTIME   
        INTO  #LEASEFINANCEDETAILS_FULL_BATCH  
        FROM [DATAHUB_ODESSA].[ODH].LEASEFINANCEDETAILS(NOLOCK) LFD    
  
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
  CREATE CLUSTERED INDEX [LEASEFINANCEDETAILS_FULL_INDX_ID]  
  ON #LEASEFINANCEDETAILS_FULL_BATCH ([ID])   
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#LEASEFINANCES_FULL_BATCH'  
,'#LEASEFINANCES_FULL_BATCH DATA INSERTITION')  
  
-------------------------------------------- Full Loading of LEASEFINANCES table ------------------------------  
   
  IF OBJECT_ID(N'TEMPDB..#LEASEFINANCES_FULL_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #LEASEFINANCES_FULL_BATCH  
  END  
        SELECT  LF.ID,CONTRACTID,ISCURRENT,CUSTOMERID,BOOKINGSTATUS,LF.LASTREFRESHTIME,LF.UPDATEDTIME,LF.CREATEDTIME   
        INTO    #LEASEFINANCES_FULL_BATCH  
        FROM [DATAHUB_ODESSA].[ODH].LEASEFINANCES(NOLOCK) LF  
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
  CREATE CLUSTERED INDEX [LEASEFINANCES_FULL_INDX_ID]  
  ON #LEASEFINANCES_FULL_BATCH ([ID])   
  --CREATE NONCLUSTERED INDEX [LEASEFINANCES_FULL_INDX_CONTRACTID]  
  --ON #LEASEFINANCES_FULL ([CONTRACTID])    
-------------------------------------------- Required Loading of LEASEFINANCES table ------------------------------  
   
  IF OBJECT_ID(N'TEMPDB..#LEASEFINANCES_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #LEASEFINANCES_BATCH  
  END  
        SELECT  LF.ID,CONTRACTID,ISCURRENT,CUSTOMERID,BOOKINGSTATUS,LF.LASTREFRESHTIME,LF.UPDATEDTIME,LF.CREATEDTIME   
        INTO    #LEASEFINANCES_BATCH  
        FROM [DATAHUB_ODESSA].[ODH].LEASEFINANCES(NOLOCK) LF  
       INNER JOIN #CONTRACTS_BATCH CT ON CT.ID=LF.CONTRACTID  
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
  CREATE CLUSTERED INDEX [LEASEFINANCES_INDX_ID]  
  ON #LEASEFINANCES_BATCH ([ID])   
  --CREATE NONCLUSTERED INDEX [LEASEFINANCES_INDX_CONTRACTID]  
  --ON #LEASEFINANCES ([CONTRACTID])  
-------------------------------------------------------------------------------------  
  INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
  CreatedOn  
  ,CreatedBy  
  ,ScriptName  
  ,SectionAsPerLogic  
  )  
  VALUES (getdate()  
  ,'PMR'  
  ,'#LEASEFINANCEDETAILS_BATCH'  
  ,'#LEASEFINANCEDETAILS_BATCH DATA INSERTITION')  
--------------------------------------------Required Loading of LEASEFINANCEDETAILS table ------------------------------  
   
  IF OBJECT_ID(N'TEMPDB..#LEASEFINANCEDETAILS_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #LEASEFINANCEDETAILS_BATCH  
  END  
        SELECT  LFD.ID,ISCREATEDTHROUGHPAYOFFEXTENSION,MATURITYDATE,ISOVERTERMLEASE,RENT_AMOUNT,ISREGULARPAYMENTSTREAM,LFD.LASTREFRESHTIME,LFD.UPDATEDTIME,LFD.CREATEDTIME   
        INTO    #LEASEFINANCEDETAILS_BATCH  
        FROM [DATAHUB_ODESSA].[ODH].LEASEFINANCEDETAILS(NOLOCK) LFD  
       INNER JOIN #LEASEFINANCES_BATCH LF ON LF.ID=LFD.ID  
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
  CREATE CLUSTERED INDEX [LEASEFINANCEDETAILS_INDX_ID]  
  ON #LEASEFINANCEDETAILS_BATCH ([ID])   
  
------------------------------------ Loading of LEASEASSETS table ------------------------------  
  
  IF OBJECT_ID(N'TEMPDB..#LEASEASSETS_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #LEASEASSETS_BATCH  
  END  
        SELECT DISTINCT LA.ID,ASSETID,LEASEFINANCEID,TERMINATIONDATE,RENT_AMOUNT,BOOKEDRESIDUAL_AMOUNT,NBV_AMOUNT,CUSTOMERCOST_AMOUNT,CUSTOMEREXPECTEDRESIDUAL_AMOUNT,BLINDDISCOUNTPERCENTAGE,OTPRENT_AMOUNT,MAXOTPPAYMENT,FULLYCREDITED,LA.ISACTIVE,LA.LASTREF
RESHTIME,LA.UPDATEDTIME,LA.CREATEDTIME   
        INTO    #LEASEASSETS_BATCH  
        FROM [DATAHUB_ODESSA].[ODH].LEASEASSETS(NOLOCK) LA  
       INNER JOIN #LEASEFINANCES_BATCH LF ON  LF.ID=LA.LEASEFINANCEID    
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
  CREATE CLUSTERED INDEX [LEASEASSETS_INDX_ASSETID]  
  ON #LEASEASSETS_BATCH (ASSETID)   
  --CREATE NONCLUSTERED INDEX [LEASEASSETS_INDX_ASSETID]  
  --ON #LEASEASSETS ([ASSETID])  
  
  
------------------------------------ Loading of ASSETS table ------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#ASSETS_BATCH'  
,'#ASSETS_BATCH DATA INSERTITION')  
  
  IF OBJECT_ID(N'TEMPDB..#ASSETS_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #ASSETS_BATCH  
  END  
        SELECT  DISTINCT AST.ID,STATUS,PARENTASSETID,ORIGINALPARENTASSETID,MANUFACTURERID,MODELID,ORIGINALASSETID,ALIAS,INITIALASSETCOST_AMOUNT,LEGALENTITYID,CUSTOMERID,PRODUCTID,AST.LASTREFRESHTIME,AST.UPDATEDTIME,AST.CREATEDTIME  
        INTO    #ASSETS_BATCH  
        FROM [DATAHUB_ODESSA].[ODH].ASSETS(NOLOCK) AST  
       INNER JOIN #LEASEASSETS_BATCH LA ON  LA.ASSETID=AST.ID    
---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
  CREATE CLUSTERED INDEX [ASSETS_INDX_ID]  
  ON #ASSETS_BATCH ([ID])   
  CREATE NONCLUSTERED INDEX [ASSETS_INDX_STATUS]  
  ON #ASSETS_BATCH ([STATUS])  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#ASSET_REQ_BATCH'  
,'#ASSET_REQ_BATCH DATA INSERTITION')  
  
  IF OBJECT_ID(N'TEMPDB..#ASSET_REQ_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #ASSET_REQ_BATCH  
  END  
  
  ;WITH CTE  
  AS  
  (  
   
      SELECT    
         LA.ASSETID,LF.CONTRACTID,  
         LA.ISACTIVE,LA.TERMINATIONDATE,LFD.MATURITYDATE,  
         LF.ID 'LEASEFINANCEID',  
         ROW_NUMBER() OVER (PARTITION BY LF.CONTRACTID,LA.ASSETID,LA.ISACTIVE,LA.TERMINATIONDATE ORDER BY LF.ID DESC,LA.ID DESC,LF.CONTRACTID DESC) AS ROWNUM,  
         LF.BOOKINGSTATUS,  
         LA.ID 'LEASEASSETID', LF.ISCURRENT,LA.FULLYCREDITED,AST.STATUS  
      FROM     #LEASEASSETS_BATCH LA  
      INNER JOIN  #ASSETS_BATCH AST ON AST.ID=LA.ASSETID  
      INNER JOIN  #LEASEFINANCES_BATCH LF ON LA.LEASEFINANCEID = LF.ID  
      INNER JOIN  #LEASEFINANCEDETAILS_BATCH LFD ON LFD.ID = LF.ID  
      WHERE (LA.ISACTIVE = 1 OR LA.TERMINATIONDATE IS NOT NULL) AND ((AST.STATUS=N'Sold' AND LF.ISCURRENT = 0 AND LA.ISACTIVE=1) OR (AST.STATUS<>N'Sold'))  
     
  
  ) SELECT * INTO #ASSET_REQ_BATCH FROM CTE  
  
  ;WITH CTE  
  AS (  
  SELECT * FROM #ASSET_REQ_BATCH  
  )  DELETE FROM CTE WHERE ROWNUM<>1  
  
  
  
  CREATE CLUSTERED INDEX [ASSET_REQ_BATCH_ID]  
  ON #ASSET_REQ_BATCH (CONTRACTID)   
   
   
------------------------------------ Loading of PAYOFFASSETS table ------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#PAYOFFASSETS_BATCH'  
,'#PAYOFFASSETS_BATCH DATA INSERTITION')  
  
  IF OBJECT_ID(N'TEMPDB..#PAYOFFASSETS_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #PAYOFFASSETS_BATCH  
  END  
        SELECT DISTINCT  PAYOFFAST.ID,LEASEASSETID,STATUS,PAYOFFAMOUNT_AMOUNT,BUYOUTAMOUNT_AMOUNT,PAYOFFID,TERMINATIONREASONCONFIGID,PAYOFFAST.ISACTIVE  
        INTO    #PAYOFFASSETS_BATCH  
        FROM   
        [DATAHUB_ODESSA].[ODH].PAYOFFASSETS(NOLOCK) PAYOFFAST   
  INNER JOIN #LEASEASSETS_BATCH LA ON  LA.ID=PAYOFFAST.LEASEASSETID   
     
  CREATE CLUSTERED INDEX [PAYOFFASSETS_BATCH_PAYOFFID]  
  ON #PAYOFFASSETS_BATCH (PAYOFFID)   
-------------------------------------------------------------------------------------- Loading of PAYOFFS table ------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#PAYOFFS_BATCH'  
,'#PAYOFFS_BATCH DATA INSERTITION')  
  
  
  IF OBJECT_ID(N'TEMPDB..#PAYOFFS_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #PAYOFFS_BATCH  
  END  
        SELECT DISTINCT  PAYOFFS.ID,PAYOFFS.LEASEFINANCEID,STOPINVOICINGFUTURERENTALS,PAYOFFS.STATUS,TERMINATIONOPTIONID,PAYOFFASSETSTATUS,PAYOFFEFFECTIVEDATE,PAYOFFS.UPDATEDTIME,PAYOFFS.CREATEDTIME,PAYOFFS.POSTDATE,PAYOFFS.CONTRACTAMENDMENTREASONCODEID,P
AYOFFS.EXTENSIONREASONCODEID  
        INTO    #PAYOFFS_BATCH  
        FROM  [DATAHUB_ODESSA].[ODH].PAYOFFS(NOLOCK) PAYOFFS  
  INNER JOIN #PAYOFFASSETS_BATCH PAYOFFAST ON  PAYOFFS.ID=PAYOFFAST.PAYOFFID    
  INNER JOIN #LEASEASSETS_BATCH LA ON  LA.ID=PAYOFFAST.LEASEASSETID       
  
  CREATE CLUSTERED INDEX [PAYOFFS_BATCH_ID]  
  ON #PAYOFFS_BATCH (ID)   
  
------------------------------------------------------------------------------- Loading ASSET STATUS DETAIL TABLE--------------------------------------------  
---------------------------------------------------------------- Update Asset status----------------------------------------------------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#PAYOFFS'  
,'#PAYOFFS DATA INSERTITION')  
    
  IF OBJECT_ID(N'TEMPDB..#PAYOFFS')  IS NOT NULL  
  BEGIN  
   DROP TABLE #PAYOFFS  
  END     
  
  IF OBJECT_ID(N'TEMPDB..#PAYOFFS_TEMP')  IS NOT NULL  
  BEGIN  
   DROP TABLE #PAYOFFS_TEMP  
  END     
    
 ;WITH PAYOFFS AS  
 (  SELECT   
        LEASEASSETID,  
        PAYOFFLEASEASSET.ASSETID,  
        PAYOFF.STATUS AS PAYOFF_STATUS,    
        PAYOFFASSET.STATUS AS PAYOFFASSETSTATUS,  
        STOPINVOICINGFUTURERENTALS,  
        PAYOFFEFFECTIVEDATE,   
        PAYOFFLEASEFINANCE.CONTRACTID,  
        PTO.NAME AS PAYOFFTERMINATIONOPTION,  
        TERMINATIONREASONCONFIGID,  
        BUYOUTAMOUNT_AMOUNT,  
        PAYOFFAMOUNT_AMOUNT,  
        ROW_NUMBER() OVER (PARTITION BY PAYOFFLEASEASSET.ASSETID,PAYOFFLEASEFINANCE.CONTRACTID ORDER BY STOPINVOICINGFUTURERENTALS DESC,ISNULL(PAYOFF.UPDATEDTIME,PAYOFF.CREATEDTIME) DESC) AS RID   
      FROM #LEASEFINANCES_BATCH PAYOFFLEASEFINANCE WITH (NOLOCK)  
      JOIN #LEASEASSETS_BATCH PAYOFFLEASEASSET WITH (NOLOCK)   
      ON  PAYOFFLEASEFINANCE.ID = PAYOFFLEASEASSET.LEASEFINANCEID AND PAYOFFLEASEASSET.ISACTIVE=1  
      JOIN #PAYOFFASSETS_BATCH PAYOFFASSET WITH (NOLOCK)   
      ON  PAYOFFLEASEASSET.ID = PAYOFFASSET.LEASEASSETID   
      INNER JOIN #PAYOFFS_BATCH PAYOFF WITH (NOLOCK)   
      ON  PAYOFF.ID = PAYOFFASSET.PAYOFFID AND PAYOFF.STATUS NOT IN (N'REVERSED',N'INACTIVE')    
      LEFT JOIN DATAHUB_ODESSA.ODH.PAYOFFTERMINATIONOPTIONS PTO WITH (NOLOCK)   
      ON  PAYOFF.TERMINATIONOPTIONID = PTO.ID  
      WHERE  (PAYOFFASSET.ISACTIVE = 1 OR (PTO.NAME = N'CLASSIFICATIONCHANGE'  AND PAYOFFASSET.ISACTIVE = 0) OR PAYOFFASSET.STATUS IN(N'PURCHASE',N'RETURN',N'RETURNTOUPGRADE',N'EXTENSION'))  
          AND ISNULL(PAYOFFASSET.STATUS,'') NOT IN(N'MULTIPLE',N'TRANSFERTONEWCONTRACT','_')   
 ) SELECT    
    LEASEASSETID,  
    ASSETID,  
    PAYOFF_STATUS,    
    PAYOFFASSETSTATUS,  
    STOPINVOICINGFUTURERENTALS,  
    PAYOFFEFFECTIVEDATE,   
    CONTRACTID,  
    PAYOFFTERMINATIONOPTION,  
    TERMINATIONREASONCONFIGID,  
    BUYOUTAMOUNT_AMOUNT,  
    PAYOFFAMOUNT_AMOUNT  
    INTO #PAYOFFS_TEMP  
        FROM PAYOFFS  
 WHERE RID=1  
       
      
      
      CREATE CLUSTERED INDEX [PAYOFFS_TEMP_ASSETID]  
  ON #PAYOFFS_TEMP (ASSETID)   
      
      
      
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#ASSET_STATUS_BATCH'  
,'#ASSET_STATUS_BATCH DATA INSERTITION')     
      
    IF OBJECT_ID(N'TEMPDB..#ASSET_STATUS_BATCH')  IS NOT NULL  
   BEGIN  
    DROP TABLE #ASSET_STATUS_BATCH  
   END  
  
             SELECT DISTINCT      
     ASSET.ID AS ASSETID,   
     ASSET.ORIGINALASSETID,  
     ASSET.STATUS,  
     LF.CONTRACTID,     
      (CASE WHEN  PAYOFFINFO.PAYOFFEFFECTIVEDATE < LEASEASSETINFOES.MATURITYDATE THEN 'EARLY-'    
    WHEN  PAYOFFINFO.PAYOFFEFFECTIVEDATE = LEASEASSETINFOES.MATURITYDATE THEN 'EOL-'    
    WHEN  PAYOFFINFO.PAYOFFEFFECTIVEDATE > LEASEASSETINFOES.MATURITYDATE THEN 'MTM-'      
    WHEN LEASEASSETINFOES.MATURITYDATE < GETDATE() THEN 'UPM-' END) +    
     (CASE                  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL THEN 'AE'         
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED',N'SOLD') AND PAYOFFINFO.PAYOFF_STATUS=N'ACTIVATED' AND PAYOFFINFO.PAYOFFASSETSTATUS=N'EXTENSION' THEN 'AD'    
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS,'') NOT IN(N'MULTIPLE',N'TRANSFERTONEWCONTRACT','_') THEN 'AE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFF_STATUS NOT IN(N'ACTIVATED',N'INACTIVE') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL THEN 'AE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  THEN 'HD'                   
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFASSETSTATUS = N'PURCHASE' THEN 'BO'                 
      WHEN ASSET.STATUS=N'SOLD'  AND PAYOFFINFO.PAYOFFASSETSTATUS IN (N'RETURN',N'RETURNTOUPGRADE') THEN 'TD'      
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = N'CLASSIFICATIONCHANGE'THEN 'TD'  
       WHEN ASSET.STATUS=N'SCRAP' AND LEASEASSETINFOES.FULLYCREDITED = 1 THEN 'TD'   
      ELSE 'UNKNOWN'                 
     END) AS AGGSTATUS,   
     (CASE WHEN  PAYOFFINFO.PAYOFFEFFECTIVEDATE < LEASEASSETINFOES.MATURITYDATE THEN 'EARLY-'    
    WHEN  PAYOFFINFO.PAYOFFEFFECTIVEDATE = LEASEASSETINFOES.MATURITYDATE THEN 'EOL-'    
    WHEN  PAYOFFINFO.PAYOFFEFFECTIVEDATE > LEASEASSETINFOES.MATURITYDATE THEN 'MTM-'      
    WHEN LEASEASSETINFOES.MATURITYDATE < GETDATE() THEN 'UPM-' END) +    
     (CASE                  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL THEN 'AE'         
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED',N'SOLD') AND PAYOFFINFO.PAYOFF_STATUS=N'ACTIVATED' AND PAYOFFINFO.PAYOFFASSETSTATUS=N'EXTENSION' THEN 'AD'    
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS,'') NOT IN(N'MULTIPLE',N'TRANSFERTONEWCONTRACT','_') THEN 'AE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFF_STATUS NOT IN(N'ACTIVATED',N'INACTIVE') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL THEN 'AE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  THEN 'HD'                   
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFASSETSTATUS = N'PURCHASE' THEN 'BO'                 
      WHEN ASSET.STATUS=N'SOLD'  AND PAYOFFINFO.PAYOFFASSETSTATUS IN (N'RETURN',N'RETURNTOUPGRADE') THEN 'TD'      
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = N'CLASSIFICATIONCHANGE'THEN 'TD'  
       WHEN ASSET.STATUS=N'SCRAP' AND LEASEASSETINFOES.FULLYCREDITED = 1 THEN 'TD'   
      ELSE 'UNKNOWN'                 
     END) AS AGGSTATUS_CODE,    
     (CASE                  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL THEN 'ACTIVE'     
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED',N'SOLD') AND PAYOFFINFO.PAYOFF_STATUS=N'ACTIVATED' AND PAYOFFINFO.PAYOFFASSETSTATUS=N'EXTENSION' THEN 'AMENDED'    
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS,'') NOT IN(N'MULTIPLE',N'TRANSFERTONEWCONTRACT','_') THEN 'ACTIVE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFF_STATUS NOT IN(N'ACTIVATED',N'INACTIVE') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL THEN 'ACTIVE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  THEN 'ASSET ON HOLD'                   
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFASSETSTATUS = N'PURCHASE' THEN 'BUY OUT'                 
      WHEN ASSET.STATUS=N'SOLD'  AND PAYOFFINFO.PAYOFFASSETSTATUS IN (N'RETURN',N'RETURNTOUPGRADE') THEN 'TERMINATED'    
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = N'CLASSIFICATIONCHANGE'THEN 'TERMINATED'  
      WHEN ASSET.STATUS=N'SCRAP' AND LEASEASSETINFOES.FULLYCREDITED = 1 THEN 'TERMINATED'   
      ELSE 'UNKNOWN'                  
     END) AS ASSET_STATUS,    
     (CASE                  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL THEN 'AE'         
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED','SOLD') AND PAYOFFINFO.PAYOFF_STATUS=N'ACTIVATED' AND PAYOFFINFO.PAYOFFASSETSTATUS=N'EXTENSION' THEN 'AD'    
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS,'') NOT IN(N'MULTIPLE',N'TRANSFERTONEWCONTRACT','_') THEN 'AE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.PAYOFF_STATUS NOT IN(N'ACTIVATED',N'INACTIVE') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0 AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL THEN 'AE'  
      WHEN ASSET.STATUS IN (N'LEASED', N'INVESTORLEASED') AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  THEN 'HD'                   
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFASSETSTATUS = N'PURCHASE' THEN 'BO'                 
      WHEN ASSET.STATUS=N'SOLD'  AND PAYOFFINFO.PAYOFFASSETSTATUS IN (N'RETURN',N'RETURNTOUPGRADE') THEN 'TD'          
      WHEN ASSET.STATUS=N'SOLD' AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = N'CLASSIFICATIONCHANGE'THEN 'TD'  
      WHEN ASSET.STATUS=N'SCRAP' AND LEASEASSETINFOES.FULLYCREDITED = 1 THEN 'TD'   
      ELSE 'UNKNOWN'                
     END) AS ASSET_STATUS_CODE,  
     PAYOFFINFO.STOPINVOICINGFUTURERENTALS,  
     PAYOFFINFO.PAYOFF_STATUS,  
     PAYOFFINFO.PAYOFFEFFECTIVEDATE,  
     PAYOFFINFO.PAYOFFASSETSTATUS AS PAYOFFASSETS_STATUS,  
     PAYOFFINFO.PAYOFFAMOUNT_AMOUNT,  
     PAYOFFINFO.BUYOUTAMOUNT_AMOUNT,  
     LA.ID AS LEASEASSETID,  
     PAYOFFINFO.TERMINATIONREASONCONFIGID,  
     ASSET.LASTREFRESHTIME,  
     ASSET.UPDATEDTIME,  
     ASSET.CREATEDTIME  
  
     INTO #ASSET_STATUS_BATCH  
  
 FROM   #ASSETS_BATCH ASSET WITH (NOLOCK)  
 INNER JOIN      #LEASEASSETS_BATCH LA ON LA.ASSETID=ASSET.ID  
 INNER JOIN      #LEASEFINANCES_BATCH LF ON LF.ID= LA.LEASEFINANCEID  
 INNER JOIN      #ASSET_REQ_BATCH LEASEASSETINFOES ON   LEASEASSETINFOES.CONTRACTID=LF.CONTRACTID AND LA.ASSETID=LEASEASSETINFOES.ASSETID AND LEASEASSETINFOES.LEASEASSETID=LA.ID  AND  (LEASEASSETINFOES.STATUS <> 'SCRAP' OR (LEASEASSETINFOES.FULLYCREDITED
 = 1 AND LEASEASSETINFOES.STATUS = 'SCRAP'))  
 LEFT JOIN    #PAYOFFS_TEMP PAYOFFINFO ON LEASEASSETINFOES.ASSETID = PAYOFFINFO.ASSETID AND LEASEASSETINFOES.CONTRACTID = PAYOFFINFO.CONTRACTID  AND PAYOFFINFO.LEASEASSETID=LEASEASSETINFOES.LEASEASSETID  
 WHERE     ASSET.STATUS NOT IN ( N'INVESTOR', N'COLLATERAL', N'DONATED', N'INVENTORY',N'WRITEOFF',N'ERROR',N'COLLATERALONLOAN',N'COLLATERALPAIDOFF')   
 AND      LEASEASSETINFOES.BOOKINGSTATUS IN (N'COMMENCED',N'FULLYPAIDOFF',N'TERMINATED') AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS,'') NOT IN(N'MULTIPLE',N'TRANSFERTONEWCONTRACT','_')  
   
  CREATE CLUSTERED INDEX [ASSET_STATUS_BATCH_ASSETID]  
  ON #ASSET_STATUS_BATCH (ASSETID)   
   
---------------------------------------------------- Derived Gen Caclculation ---------------------------------------------------------------------------  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#CONTRACTHIERARCHY_BATCH'  
,'#CONTRACTHIERARCHY_BATCH DATA INSERTITION')     
   
 IF OBJECT_ID(N'TEMPDB..#CONTRACTHIERARCHY_BATCH')  IS NOT NULL  
 BEGIN  
 DROP TABLE #CONTRACTHIERARCHY_BATCH  
 END  
 SELECT ID,ORIGINALCONTRACTID AS PARENT,ID AS CHILD,CAST('' AS NVARCHAR(40)) AS PARENTSEQUENCENUMBER,SEQUENCENUMBER AS CHILDSEQUENCENUMBER,STATUS AS CONTRACTSTATUS  
 ,ROW_NUMBER() OVER (ORDER BY ID) AS BATCHNUMBER  
 ,1 AS LEVEL  
 INTO #CONTRACTHIERARCHY_BATCH  
 FROM #CONTRACTS_FULL_BATCH    
 WHERE ORIGINALCONTRACTID IS NULL   
  
 CREATE CLUSTERED INDEX [CONTRACTHIERARCHY_BATCH_CHILD]  
 ON #CONTRACTHIERARCHY_BATCH (CHILD)   
    
 IF OBJECT_ID(N'TEMPDB..#CONTRACTHIERARCHY_COM')  IS NOT NULL  
 BEGIN  
 DROP TABLE #CONTRACTHIERARCHY_COM  
 END  
 SELECT ID,PARENT,CHILD,PARENTSEQUENCENUMBER,CHILDSEQUENCENUMBER,CONTRACTSTATUS,BATCHNUMBER,LEVEL INTO #CONTRACTHIERARCHY_COM FROM   
     
 (SELECT ID,PARENT,CHILD,PARENTSEQUENCENUMBER,CHILDSEQUENCENUMBER,CONTRACTSTATUS,BATCHNUMBER,LEVEL FROM  #CONTRACTHIERARCHY_BATCH  
     
 UNION   
 SELECT ID,PARENT,CHILD,PARENTSEQUENCENUMBER,CHILDSEQUENCENUMBER,CONTRACTSTATUS,BATCHNUMBER,LEVEL+ROW_NUMBER() OVER (PARTITION BY PARENTSEQUENCENUMBER ORDER BY CHILD) AS LEVEL  
 FROM  
 (  
 SELECT DISTINCT C.ID,CH.CHILD AS PARENT,C.ID AS CHILD,CH.CHILDSEQUENCENUMBER AS PARENTSEQUENCENUMBER,CAST(C.SEQUENCENUMBER AS NVARCHAR(40)) AS CHILDSEQUENCENUMBER  
 ,C.STATUS AS CONTRACTSTATUS  
 ,CH.BATCHNUMBER  
 ,CAST(CH.LEVEL AS INT) AS LEVEL  
 FROM #CONTRACTS_FULL_BATCH C  
 INNER JOIN #CONTRACTHIERARCHY_BATCH CH ON C.ORIGINALCONTRACTID = CH.CHILD   
 INNER JOIN #LEASEFINANCES_FULL_BATCH LF ON LF.CONTRACTID = C.ID   
 INNER JOIN #LEASEFINANCEDETAILS_FULL_BATCH LFD ON LFD.ID = LF.ID AND LFD.ISCREATEDTHROUGHPAYOFFEXTENSION = 1  
                 
 UNION  
                 
 SELECT DISTINCT C.ID,CH.CHILD AS PARENT,C.ID AS CHILD,CH.CHILDSEQUENCENUMBER AS PARENTSEQUENCENUMBER,CAST(C.SEQUENCENUMBER AS NVARCHAR(40)) AS CHILDSEQUENCENUMBER  
 ,C.STATUS AS CONTRACTSTATUS  
 ,CH.BATCHNUMBER  
 ,CAST(CH.LEVEL AS INT) AS LEVEL  
 FROM #CONTRACTS_FULL_BATCH C  
 INNER JOIN #CONTRACTHIERARCHY_BATCH CH ON C.ORIGINALCONTRACTID = CH.CHILD   
 INNER JOIN #LEASEFINANCES_FULL_BATCH LF ON LF.CONTRACTID = C.ID   
 INNER JOIN #LEASEFINANCEDETAILS_FULL_BATCH LFD ON LFD.ID = LF.ID AND LFD.ISCREATEDTHROUGHPAYOFFEXTENSION = 0  
 )CONTRACTHIERARCHY  
 )CONTRACTHIERARCHY_COM  
    
CREATE CLUSTERED INDEX [CONTRACTHIERARCHY_COM_CHILD]  
ON #CONTRACTHIERARCHY_COM (CHILD)   
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#CONTRACTLEVEL_BATCH'  
,'#CONTRACTLEVEL_BATCH DATA INSERTITION')   
  
  IF OBJECT_ID(N'TEMPDB..#CONTRACTLEVEL_BATCH')  IS NOT NULL  
  BEGIN  
   DROP TABLE #CONTRACTLEVEL_BATCH  
  END  
   SELECT CONTRACTID,ASSETID,ASSETALIAS,LEVEL,CHILDSEQUENCENUMBER AS SEQUENCENUMBER  
   INTO #CONTRACTLEVEL_BATCH  
    FROM  
      (  
     SELECT ROW_NUMBER() OVER(PARTITION BY  CH.BATCHNUMBER,CHILDSEQUENCENUMBER ORDER BY CH.LEVEL DESC) AS ROW_NUM, CH.ID AS CONTRACTID,  
     LF.ID AS LFID,AST.ID AS ASSETID,AST.ALIAS AS ASSETALIAS,PARENTSEQUENCENUMBER,CHILDSEQUENCENUMBER,PARENT, CHILD,CONTRACTSTATUS, BATCHNUMBER, LEVEL   
     FROM #CONTRACTHIERARCHY_COM  CH  
     INNER JOIN #LEASEFINANCES_BATCH LF ON LF.CONTRACTID = CH.CHILD AND ISCURRENT = 1  
     INNER JOIN #LEASEASSETS_BATCH LA ON LA.LEASEFINANCEID=LF.ID  
     INNER JOIN #ASSETS_BATCH AST ON AST.ID=LA.ASSETID  
    )FINALLEVEL WHERE ROW_NUM=1  
   CREATE CLUSTERED INDEX [CONTRACTLEVEL_BATCH_CONTRACTID]  
  ON #CONTRACTLEVEL_BATCH (CONTRACTID)   
  
  IF OBJECT_ID(N'TEMPDB..#AMENDMENTLEVEL')  IS NOT NULL  
  BEGIN  
   DROP TABLE #AMENDMENTLEVEL  
  END     
   SELECT  LF.CONTRACTID,LF.ID AS LFID,AST.ID AS ASSETID,AST.ALIAS AS ASSETALIAS,1 AS LEVEL,ED.SEQUENCENUMBER  
   INTO #AMENDMENTLEVEL  
        FROM DATAHUB_ODESSA.ODH.LEASEAMENDMENTS(NOLOCK) LA   
     INNER JOIN #LEASEFINANCES_BATCH LF ON LA.CURRENTLEASEFINANCEID = LF.ID  
     INNER JOIN #CONTRACTLEVEL_BATCH ED ON ED.CONTRACTID = LF.CONTRACTID  
     INNER JOIN #LEASEASSETS_BATCH LAS ON LAS.LEASEFINANCEID=LF.ID  
     INNER JOIN #ASSETS_BATCH AST ON AST.ID=LAS.ASSETID  
        WHERE AMENDMENTTYPE=N'ASSUMPTION' AND LEASEAMENDMENTSTATUS=N'APPROVED'  AND ORIGINALLEASEFINANCEID IS NOT NULL  
  
       CREATE CLUSTERED INDEX [AMENDMENTLEVEL_CONTRACTID]  
  ON #AMENDMENTLEVEL (CONTRACTID)   
  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#DERVIED_GEN'  
,'#DERVIED_GEN DATA INSERTITION')   
  
  
  IF OBJECT_ID(N'TEMPDB..#DERVIED_GEN')  IS NOT NULL  
  BEGIN  
   DROP TABLE #DERVIED_GEN  
  END  
  
  
     SELECT CONTRACTID,ASSETALIAS,ASSETID,SUM(LEVEL) AS DR_GEN,SEQUENCENUMBER  
     INTO #DERVIED_GEN  
           FROM  
      (  
     SELECT CONTRACTID,ASSETALIAS,ASSETID,LEVEL,SEQUENCENUMBER FROM #CONTRACTLEVEL_BATCH  
     UNION ALL  
     SELECT CONTRACTID,ASSETALIAS,ASSETID,LEVEL,SEQUENCENUMBER FROM #AMENDMENTLEVEL  
    )DR  GROUP BY CONTRACTID,ASSETALIAS,ASSETID,SEQUENCENUMBER  
  
    CREATE CLUSTERED INDEX [DERVIED_GEN_ASSETALIAS]  
  ON #DERVIED_GEN (ASSETALIAS)   
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#ASSET_HISTORIES'  
,'#ASSET_HISTORIES DATA INSERTITION')     
------------------------------------------------- Load #ASSET_HISTORIES TABLE---------------------------------------------------  
   
  
   IF OBJECT_ID(N'TEMPDB..#ASSET_HISTORIES')  IS NOT NULL  
   BEGIN  
   DROP TABLE #ASSET_HISTORIES  
   END  
  
   IF OBJECT_ID(N'TEMPDB..#AST_HIST')  IS NOT NULL  
   BEGIN  
   DROP TABLE #AST_HIST  
   END  
   
   SELECT ASSETALIAS,CONTRACT_NUMBER,DERIVED_GEN,ROOT_CONTRACT_ID,ROOT_CONTRACT_MATURITY_DATE,ROOT_TERMINATION_DATE  
   ,ROOT_TRANSACTION_TYPE,ROOT_CONTRACT_DETAIL_STATUS_CODE,ROOT_CONTRACT_DETAIL_TYPE_CODE,ROOT_CONTRACT_NUMBER,ROOT_ID_EP_CONTRACT_HEADER,ROOT_CONTRACT_START_DATE,ROOT_RESIDUAL_AMOUNT, ROOT_AGG_STATUS,VENDOR_COMPANY_NAME,VENDOR_COMPANY_ID,AH.LASTREFRESHTI
ME  
   into #AST_HIST  
   FROM [DatahubPMR].[ASSET_HISTORIES](NOLOCK) AH   
   INNER JOIN #CONTRACTS_BATCH CON(NOLOCK) ON CON.SEQUENCENUMBER = AH.CONTRACT_NUMBER  
   WHERE ASSETALIAS IS NOT NULL AND CONTRACT_NUMBER IS NOT NULL  
  
  
   select * into #ASSET_HISTORIES  
   from (  
   select ROW_NUMBER() OVER(PARTITION BY CONTRACT_NUMBER,ASSETALIAS ORDER BY DERIVED_GEN DESC,LASTREFRESHTIME DESC) AS ROW_NUM,* from #AST_HIST  
   )aa  WHERE ROW_NUM <> 1  
  
  
   
  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#DERVIED_GEN_FINAL'  
,'#DERVIED_GEN_FINAL DATA INSERTITION')     
  
 IF OBJECT_ID(N'TEMPDB..#DERVIED_GEN_FINAL')  IS NOT NULL  
  BEGIN  
   DROP TABLE #DERVIED_GEN_FINAL  
  END  
   
  SELECT DISTINCT DR.CONTRACTID,DR.ASSETID,DR.ASSETALIAS, (CASE WHEN CAST(ISNULL(DERIVED_GEN,0) AS INT)>0 THEN CAST(ISNULL(DR_GEN,0) AS INT)-1 ELSE CAST(ISNULL(DR_GEN,0) AS INT) END)  +CAST(ISNULL(DERIVED_GEN,0) AS INT) AS DERIVED_GEN,ROOT_CONTRACT_ID  
  ,ROOT_CONTRACT_MATURITY_DATE  
  ,ROOT_TERMINATION_DATE  
  ,ROOT_TRANSACTION_TYPE  
  ,ROOT_CONTRACT_DETAIL_STATUS_CODE  
  ,ROOT_CONTRACT_DETAIL_TYPE_CODE  
  ,ROOT_CONTRACT_NUMBER  
  ,ROOT_ID_EP_CONTRACT_HEADER  
  ,ROOT_CONTRACT_START_DATE  
  ,'' AS ROOT_ASSET_ID  
  ,ROOT_RESIDUAL_AMOUNT  
  ,ROOT_AGG_STATUS  
  ,VENDOR_COMPANY_NAME  
  ,VENDOR_COMPANY_ID  
  INTO  #DERVIED_GEN_FINAL  
  FROM #DERVIED_GEN DR  
  LEFT OUTER JOIN   
  #ASSET_HISTORIES(NOLOCK) AH ON AH.ASSETALIAS=DR.ASSETALIAS AND AH.CONTRACT_NUMBER=DR.SEQUENCENUMBER  
    
  CREATE CLUSTERED INDEX [DERVIED_GEN_FINAL_CONTRACTID]  
  ON #DERVIED_GEN_FINAL (CONTRACTID)   
  
  
  
 ------------------------------ Loaded calcuation on #REMAININGRENT table    ---------------------------------------------------------  
   
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#REMAININGRENT_BATCH'  
,'#REMAININGRENT_BATCH DATA INSERTITION')  
    
IF OBJECT_ID(N'TEMPDB..#REMAININGRENT_BATCH')  IS NOT NULL  
   BEGIN  
   DROP TABLE #REMAININGRENT_BATCH  
   END  
          
   SELECT R.ENTITYID AS CONTRACTID,RD.ASSETID,SUM(RD.AMOUNT_AMOUNT) AS REMAININGRENT   
     INTO #REMAININGRENT_BATCH  
  FROM  
   [DATAHUB_ODESSA].[ODH].RECEIVABLEDETAILS(NOLOCK) RD  
      INNER JOIN   
      [DATAHUB_ODESSA].[ODH].RECEIVABLES(NOLOCK) R ON R.ID=RD.RECEIVABLEID  AND RD.ISACTIVE=1   
      INNER JOIN   
      [DATAHUB_ODESSA].[ODH].RECEIVABLECODES(NOLOCK) RC ON RC.ID=R.RECEIVABLECODEID AND R.ISACTIVE=1 AND R.ISDUMMY=0 AND R.ENTITYTYPE='CT'  
      INNER JOIN   
      [DATAHUB_ODESSA].[ODH].RECEIVABLETYPES(NOLOCK) RT ON RT.ID=RC.RECEIVABLETYPEID  
   INNER JOIN   
      #CONTRACTS_BATCH (NOLOCK) CT ON CT.ID=R.ENTITYID  
      WHERE RT.NAME IN(N'CAPITALLEASERENTAL',N'OPERATINGLEASERENTAL') AND R.DUEDATE>CAST(GETDATE() AS DATE)  
   GROUP BY R.ENTITYID,RD.ASSETID  
  
   CREATE CLUSTERED INDEX [REMAININGRENT_BATCH_CONTRACTID]  
  ON #REMAININGRENT_BATCH (CONTRACTID)   
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#TBL_DERIVED_GEN'  
,'#TBL_DERIVED_GEN DATA INSERTITION')   
  
-------------------------------------------------------------------------------------  
TRUNCATE TABLE [DatahubPMR].[TBL_DERIVED_GEN]     
TRUNCATE TABLE [DatahubPMR].[TBL_DERIVED_GEN_FINAL]    
  
  
  
INSERT INTO [DatahubPMR].[TBL_DERIVED_GEN]   
 SELECT  LA.ASSETID AS ASSETID,CT.ID AS CONTRACTID,    
  ISNULL(DERIVED_GEN,0) AS DERIVED_GEN,      
  LA.BOOKEDRESIDUAL_AMOUNT AS RESIDUAL_AMOUNT,RECIVABLE.REMAININGRENT AS REMAININGRENT,  
  AST.AGGSTATUS,    
  AST.AGGSTATUS_CODE,    
  AST.ASSET_STATUS,    
  AST.ASSET_STATUS_CODE,  
  AST.STOPINVOICINGFUTURERENTALS,  
  AST.PAYOFF_STATUS,  
  AST.PAYOFFEFFECTIVEDATE,  
  AST.PAYOFFASSETS_STATUS,  
  AST.PAYOFFAMOUNT_AMOUNT,  
  AST.LEASEASSETID,  
  ROOT_CONTRACT_ID,  
  ROOT_CONTRACT_MATURITY_DATE,  
  ROOT_TERMINATION_DATE,  
  ROOT_TRANSACTION_TYPE,  
  ROOT_CONTRACT_DETAIL_STATUS_CODE,  
  ROOT_CONTRACT_DETAIL_TYPE_CODE,  
  ROOT_CONTRACT_NUMBER,  
  ROOT_ID_EP_CONTRACT_HEADER,  
  ROOT_CONTRACT_START_DATE,  
  ROOT_ASSET_ID,  
  ROOT_RESIDUAL_AMOUNT,  
  ROOT_AGG_STATUS,  
  VENDOR_COMPANY_NAME,  
  VENDOR_COMPANY_ID,  
  GETDATE() AS LASTREFRESHTIME    
 FROM    
 [DATAHUB_ODESSA].[ODH].CUSTOMERS(NOLOCK) CS    
 INNER JOIN [DATAHUB_ODESSA].[ODH].PARTIES(NOLOCK) P ON P.ID=CS.ID    
 INNER JOIN #LEASEFINANCES_BATCH LF ON LF.CUSTOMERID=CS.ID   
 INNER JOIN #LEASEFINANCEDETAILS_BATCH LFD ON LF.ID=LFD.ID    
 INNER JOIN #CONTRACTS_BATCH CT ON CT.ID = LF.CONTRACTID    
 INNER JOIN #LEASEASSETS_BATCH LA ON LA.LEASEFINANCEID=LF.ID   
 INNER JOIN #ASSET_STATUS_BATCH AST ON AST.ASSETID=LA.ASSETID AND AST.CONTRACTID=CT.ID AND AST.LEASEASSETID=LA.ID  
 LEFT OUTER JOIN #DERVIED_GEN_FINAL DR ON  DR.CONTRACTID= CT.ID    
 LEFT OUTER JOIN #REMAININGRENT_BATCH RECIVABLE ON RECIVABLE.CONTRACTID=CT.ID AND RECIVABLE.ASSETID=LA.ASSETID  
 WHERE AST.ASSET_STATUS IS NOT NULL     
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (getdate()  
,'PMR'  
,'#TBL_DERIVED_GEN_FINAL'  
,'#TBL_DERIVED_GEN_FINAL DATA INSERTITION')  
  
--------------------------------------------  end ----------------------------------------------------------------------    
INSERT INTO [DatahubPMR].[TBL_DERIVED_GEN_FINAL]    
  
  
SELECT DG.ASSETID,DG.CONTRACTID,DG.RESIDUAL_AMOUNT,DG.REMAININGRENT,DG.DERIVED_GEN,DG.AGGSTATUS,DG.ASSET_STATUS,DG.ASSET_STATUS_CODE,    
(CASE WHEN DG.AGGSTATUS_CODE IS NOT NULL AND DG.DERIVED_GEN<=1  THEN DG.AGGSTATUS_CODE  
      WHEN DG.AGGSTATUS_CODE IS NOT NULL AND DG.DERIVED_GEN>1 AND  ROOT_AGG_STATUS IS NOT NULL THEN ROOT_AGG_STATUS  
   ELSE DG_CUST_PORTFOLIO.AGGSTATUS_CODE END) AS CUSTOMER_PORTFOLIO_DCSN_TXT,ISNULL(DG_MV_AGG.AGGSTATUS_CODE,DG.AGGSTATUS_CODE) AS MV_AGG_STATUS,DG_LAST_RESIDUAL_AMOUNT.RESIDUAL_AMOUNT AS LAST_RESIDUAL_AMOUNT,    
  DG.AGGSTATUS_CODE,DG.STOPINVOICINGFUTURERENTALS,DG.PAYOFF_STATUS,DG.PAYOFFEFFECTIVEDATE,DG.PAYOFFASSETS_STATUS,DG.PAYOFFAMOUNT_AMOUNT,DG.LEASEASSETID,  
  ROOT_CONTRACT_ID,  
  ROOT_CONTRACT_MATURITY_DATE,  
  ROOT_TERMINATION_DATE,  
  ROOT_TRANSACTION_TYPE,  
  ROOT_CONTRACT_DETAIL_STATUS_CODE,  
  ROOT_CONTRACT_DETAIL_TYPE_CODE,  
  ROOT_CONTRACT_NUMBER,  
  ROOT_ID_EP_CONTRACT_HEADER,  
  ROOT_CONTRACT_START_DATE,  
  ROOT_ASSET_ID,  
  ROOT_RESIDUAL_AMOUNT,  
  ROOT_AGG_STATUS,  
  VENDOR_COMPANY_NAME,  
  VENDOR_COMPANY_ID,  
  GETDATE() AS LASTREFRESHTIME  
FROM [DatahubPMR].[TBL_DERIVED_GEN] (NOLOCK) DG    
LEFT OUTER JOIN    
(    
    SELECT ASSETID,AGGSTATUS_CODE    
    FROM    
   (    
      SELECT ROW_NUMBER() OVER(PARTITION BY ASSETID ORDER BY CONTRACTID,LEASEASSETID) AS ROWNUM,  
      ASSETID,AGGSTATUS_CODE FROM [DatahubPMR].[TBL_DERIVED_GEN] (NOLOCK)  WHERE  DERIVED_GEN=1    
   )INN_CUST_PORTFOLIO WHERE ROWNUM=1  
)DG_CUST_PORTFOLIO    
ON DG.ASSETID=DG_CUST_PORTFOLIO.ASSETID     
LEFT OUTER JOIN    
(    
   SELECT DR_MV.ASSETID,DR_MV.AGGSTATUS_CODE,DR_AMD.CONTRACTID    
   FROM  [DatahubPMR].[TBL_DERIVED_GEN] (NOLOCK) DR_MV    
   INNER JOIN    
   (    
      SELECT  DR.ASSETID,DR.CONTRACTID,DR.AGGSTATUS_CODE, DR.DERIVED_GEN+1 AS DERIVED_GEN  FROM [DatahubPMR].[TBL_DERIVED_GEN] (NOLOCK) DR WHERE AGGSTATUS like '%AMENDED%'     
   )DR_AMD    
   ON DR_AMD.ASSETID=DR_MV.ASSETID AND DR_AMD.DERIVED_GEN=DR_MV.DERIVED_GEN    
           
)DG_MV_AGG    
ON DG.ASSETID=DG_MV_AGG.ASSETID AND  DG.CONTRACTID=DG_MV_AGG.CONTRACTID    
LEFT OUTER JOIN    
(    
   SELECT ASSETID,RESIDUAL_AMOUNT    
     FROM    
   (    
      SELECT ROW_NUMBER() OVER(PARTITION BY ASSETID ORDER BY DERIVED_GEN DESC) AS ROWNUM,RESIDUAL_AMOUNT,    
     ASSETID FROM [DatahubPMR].[TBL_DERIVED_GEN] (NOLOCK)    
   )INN_RESIDUAL_AMOUNT WHERE ROWNUM=1    
)DG_LAST_RESIDUAL_AMOUNT    
ON DG.ASSETID=DG_LAST_RESIDUAL_AMOUNT.ASSETID     
  
   
  
--BEGIN TRAN  
------------------------------------------------------- Clean up of table before data load -------------------------------------------------------------  
--TRUNCATE TABLE #ASSET_RAW_DETAILS   
--TRUNCATE TABLE #SOURCE_ASSET_RAW_DETAILS    
--------------------------------------------------------------------------End---------------------------------------------------------------------------  
----------------------------------------------------------------  Actual load of contract----------------------------------------------------------  
IF OBJECT_ID(N'TEMPDB..#CONTRACT_LOAD_BATCH') IS NOT NULL  
BEGIN  
 DROP TABLE #CONTRACT_LOAD_BATCH  
END  
  
SELECT DISTINCT CONTRACTID AS CONTRACTID    
INTO #CONTRACT_LOAD_BATCH   
FROM [DatahubPMR].[TBL_DERIVED_GEN_FINAL] (NOLOCK) DR    
  
   
----------------------------------------------------------------  Actual load of contract -- End----------------------------------------------------------  
---------------------------- Index Start ------------------------------------------------------------------------------------------------  
CREATE CLUSTERED INDEX [CONTRACT_LOAD_INDX_CONTRACTID] ON #CONTRACT_LOAD_BATCH ([CONTRACTID])  
   
--------------------------------------------------- Creation of required cuts --------------------------------------------------------------------------  
------------------------------------------- Create BatchTbl----------------  
IF OBJECT_ID(N'TEMPDB..#BATCHTBL') IS NOT NULL  
BEGIN  
 DROP TABLE #BATCHTBL  
END  
  
CREATE TABLE #BATCHTBL (CONTRACTID VARCHAR(500))  
  
CREATE NONCLUSTERED INDEX [BATCHTBL_INDX_CONTRACTNUMBER] ON #BATCHTBL (CONTRACTID)  
  
PRINT 'WHILE LOOP STARTED'  
  
------------------------------------------------end ------------------------------  
DECLARE @TotalRD INT = 0;  
DECLARE @batch INT = 1000;  
DECLARE @lastCount INT = 1;  
DECLARE @totalCount INT = 0;  
  
SELECT @TotalRD = COUNT(1)  
FROM #CONTRACT_LOAD_BATCH  
  
WHILE @lastCount > 0  
BEGIN  
 BEGIN TRAN  
  
 PRINT 'WHILE LOOP:' + CAST(@LASTCOUNT AS VARCHAR(10))  
  
 INSERT INTO #BATCHTBL (CONTRACTID)  
 SELECT CONTRACTID  
 FROM #CONTRACT_LOAD_BATCH   
 ORDER BY CONTRACTID OFFSET @totalCount ROWS  
  
 FETCH NEXT @batch ROWS ONLY  
  
 SET @lastCount = @@ROWCOUNT  
 SET @totalCount += @lastCount  
  
 PRINT 'SYNC ASSET_SUMMARY_LOAD_IDS_TARGET'  
 --SET @StartTime = @PICKUP_FROM_DATE   
  
   
   INSERT INTO [DBO].[REPORT_LOGS]  
   (    
   JOBINSTANACEID,    
   PROCESSNAME,    
   STARTTIME,    
   STATUSTYPEID  ,  
   JOBENTITYID  
   )                 
   VALUES    
   (    
   @JOBINSTANCEID,    
   'SYNC ASSET_SUMMARY_LOAD_IDS_TARGET',    
   @PICKUP_FROM_DATE,    
   0 ,  
   12                  
   )    
    
   SET  @ReportLogId = SCOPE_IDENTITY()    
  
  
  
  BEGIN TRY  
  
   
  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#CONTRACTS'  
, 'Batch was started' + cast(@totalCount AS VARCHAR(10)) + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ---------------------------------------------- Full Loading of Contract table ------------------------------  
 -------------------------------- End -----------------------------------------------------------------------------------------------  
 ---------------------------------------------- Required Loading of Contract table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#CONTRACTS') IS NOT NULL  
 BEGIN  
  DROP TABLE #CONTRACTS  
 END  
  
 SELECT CT.ID  
  ,CT.SEQUENCENUMBER  
  ,CURRENCYID  
  ,ORIGINALCONTRACTID  
  ,DEALPRODUCTTYPEID  
  ,CT.STATUS  
  ,CT.LASTREFRESHTIME  
  ,CT.UPDATEDTIME  
  ,CT.CREATEDTIME  
  ,CT.EXTERNALREFERENCENUMBER  
 INTO #CONTRACTS  
 FROM #CONTRACTS_BATCH (NOLOCK) CT  
 INNER JOIN #BATCHTBL AL ON AL.CONTRACTID = CT.ID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#CONTRACTS'  
, 'Insertion completed to #CONTRACTS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ---------------------------- Index Start ------------------------------------------------------------------------------------------------MN  
 CREATE CLUSTERED INDEX [CONTRACTS_INDX_ID] ON #CONTRACTS ([ID])  
  
 CREATE NONCLUSTERED INDEX [CONTRACTS_INDX_ORIGINALCONTRACTID] ON #CONTRACTS ([ORIGINALCONTRACTID])  
  
 CREATE NONCLUSTERED INDEX [CONTRACTS_INDX_SEQUENCENUMBER] ON #CONTRACTS ([SEQUENCENUMBER])  
  
 -------------------------------- End -----------------------------------------------------------------------------------------------  
 -------------------------------------------- Required Loading of LEASEFINANCES table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#LEASEFINANCES') IS NOT NULL  
 BEGIN  
  DROP TABLE #LEASEFINANCES  
 END  
  
 SELECT LF.ID  
  ,CONTRACTID  
  ,ISCURRENT  
  ,CUSTOMERID  
  ,BOOKINGSTATUS  
  ,LF.LASTREFRESHTIME  
  ,LF.UPDATEDTIME  
  ,LF.CREATEDTIME  
 INTO #LEASEFINANCES  
 FROM #LEASEFINANCES_BATCH (NOLOCK) LF  
 INNER JOIN #CONTRACTS CT ON CT.ID = LF.CONTRACTID  
  
 ---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
 CREATE CLUSTERED INDEX [LEASEFINANCES_INDX_ID] ON #LEASEFINANCES ([ID])  
  
 CREATE NONCLUSTERED INDEX [LEASEFINANCES_INDX_CONTRACTID] ON #LEASEFINANCES ([CONTRACTID])  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#LEASEFINANCES'  
, 'Insertion completed to #LEASEFINANCES' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 -------------------------------- End -----------------------------------------------------------------------------------------------  
 --------------------------------------------Required Loading of LEASEFINANCEDETAILS table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#LEASEFINANCEDETAILS') IS NOT NULL  
 BEGIN  
  DROP TABLE #LEASEFINANCEDETAILS  
 END  
  
 SELECT LFD.ID  
  ,ISCREATEDTHROUGHPAYOFFEXTENSION  
  ,MATURITYDATE  
  ,ISOVERTERMLEASE  
  ,RENT_AMOUNT  
  ,ISREGULARPAYMENTSTREAM  
  ,LFD.LASTREFRESHTIME  
  ,LFD.UPDATEDTIME  
  ,LFD.CREATEDTIME  
 INTO #LEASEFINANCEDETAILS  
 FROM #LEASEFINANCEDETAILS_FULL_BATCH (NOLOCK) LFD  
 INNER JOIN #LEASEFINANCES LF ON LF.ID = LFD.ID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#LEASEFINANCEDETAILS'  
, 'Insertion completed to #LEASEFINANCEDETAILS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
 CREATE CLUSTERED INDEX [LEASEFINANCEDETAILS_INDX_ID] ON #LEASEFINANCEDETAILS ([ID])  
  
 -------------------------------- End -----------------------------------------------------------------------------------------------    
 ------------------------------------ Loading of LEASEASSETS table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#LEASEASSETS') IS NOT NULL  
 BEGIN  
  DROP TABLE #LEASEASSETS  
 END  
  
 SELECT LA.ID  
  ,ASSETID  
  ,LEASEFINANCEID  
  ,TERMINATIONDATE  
  ,RENT_AMOUNT  
  ,BOOKEDRESIDUAL_AMOUNT  
  ,NBV_AMOUNT  
  ,CUSTOMERCOST_AMOUNT  
  ,CUSTOMEREXPECTEDRESIDUAL_AMOUNT  
  ,BLINDDISCOUNTPERCENTAGE  
  ,OTPRENT_AMOUNT  
  ,MAXOTPPAYMENT  
  ,FULLYCREDITED  
  ,LA.ISACTIVE  
  ,LA.LASTREFRESHTIME  
  ,LA.UPDATEDTIME  
  ,LA.CREATEDTIME  
 INTO #LEASEASSETS  
 FROM #LEASEASSETS_BATCH (NOLOCK) LA  
 INNER JOIN #LEASEFINANCES LF ON LF.ID = LA.LEASEFINANCEID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#LEASEASSETS'  
,  'Insertion completed to #LEASEASSETS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
 CREATE CLUSTERED INDEX [LEASEASSETS_INDX_ID] ON #LEASEASSETS ([ID])  
  
 CREATE NONCLUSTERED INDEX [LEASEASSETS_INDX_ASSETID] ON #LEASEASSETS ([ASSETID])  
  
 -------------------------------- End -----------------------------------------------------------------------------------------------       
 ------------------------------------ Loading of ASSETS table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#ASSETS') IS NOT NULL  
 BEGIN  
  DROP TABLE #ASSETS  
 END  
  
 SELECT DISTINCT AST.ID  
  ,STATUS  
  ,PARENTASSETID  
  ,ORIGINALPARENTASSETID  
  ,MANUFACTURERID  
  ,MODELID  
  ,ORIGINALASSETID  
  ,ALIAS  
  ,INITIALASSETCOST_AMOUNT  
  ,LEGALENTITYID  
  ,CUSTOMERID  
  ,PRODUCTID  
  ,AST.LASTREFRESHTIME  
  ,AST.UPDATEDTIME  
  ,AST.CREATEDTIME  
 INTO #ASSETS  
 FROM #ASSETS_BATCH (NOLOCK) AST  
 INNER JOIN #LEASEASSETS LA ON LA.ASSETID = AST.ID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#ASSETS'  
, 'Insertion completed to #ASSETS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ---------------------------- Index Start ------------------------------------------------------------------------------------------------MN   
 CREATE CLUSTERED INDEX [ASSETS_INDX_ID] ON #ASSETS ([ID])  
  
 CREATE NONCLUSTERED INDEX [ASSETS_INDX_STATUS] ON #ASSETS ([STATUS])  
  
 -------------------------------- End -----------------------------------------------------------------------------------------------  
 ------------------------------------ Loading of PAYOFFASSETS table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#PAYOFFASSETS') IS NOT NULL  
 BEGIN  
  DROP TABLE #PAYOFFASSETS  
 END  
  
 SELECT DISTINCT PAYOFFAST.ID  
  ,LEASEASSETID  
  ,STATUS  
  ,PAYOFFAMOUNT_AMOUNT  
  ,PAYOFFID  
  ,TERMINATIONREASONCONFIGID  
  ,PAYOFFAST.ISACTIVE  
  ,BUYOUTAMOUNT_AMOUNT  
 INTO #PAYOFFASSETS  
 FROM #PAYOFFASSETS_BATCH (NOLOCK) PAYOFFAST  
 INNER JOIN #LEASEASSETS LA ON LA.ID = PAYOFFAST.LEASEASSETID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#PAYOFFASSETS'  
, 'Insertion completed to #PAYOFFASSETS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 -------------------------------------------------------------------------------------- Loading of PAYOFFS table ------------------------------  
 IF OBJECT_ID(N'TEMPDB..#PAYOFFS') IS NOT NULL  
 BEGIN  
  DROP TABLE #PAYOFFS  
 END  
  
 SELECT DISTINCT PAYOFFS.ID  
  ,PAYOFFS.LEASEFINANCEID  
  ,STOPINVOICINGFUTURERENTALS  
  ,PAYOFFS.STATUS  
  ,TERMINATIONOPTIONID  
  ,PAYOFFASSETSTATUS  
  ,PAYOFFEFFECTIVEDATE  
  ,PAYOFFS.UPDATEDTIME  
  ,PAYOFFS.CREATEDTIME  
  ,PAYOFFS.CONTRACTAMENDMENTREASONCODEID  
  ,PAYOFFS.EXTENSIONREASONCODEID  
  ,PAYOFFS.POSTDATE  
 INTO #PAYOFFS  
 FROM #PAYOFFS_BATCH (NOLOCK) PAYOFFS  
 INNER JOIN #PAYOFFASSETS PAYOFFAST ON PAYOFFS.ID = PAYOFFAST.PAYOFFID  
 INNER JOIN #LEASEASSETS LA ON LA.ID = PAYOFFAST.LEASEASSETID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#PAYOFFS'  
, 'Insertion completed to #PAYOFFS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------------------------------------------------------- Loading ASSET STATUS DETAIL TABLE--------------------------------------------  
 ------------------------------------------------------------ Pick information of eligible contract asset id------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#ASSET_REQ') IS NOT NULL  
 BEGIN  
  DROP TABLE #ASSET_REQ  
 END  
  
 SELECT ROWNUM  
  ,ASSETID  
  ,CONTRACTID  
  ,LEASEFINANCEID  
  ,BOOKINGSTATUS  
  ,LEASEASSETID  
  ,ISCURRENT  
  ,MATURITYDATE  
  ,TERMINATIONDATE  
  ,ISACTIVE  
  ,STATUS  
  ,FULLYCREDITED  
 INTO #ASSET_REQ  
 FROM (  
  SELECT LA.ASSETID  
   ,LF.CONTRACTID  
   ,LA.ISACTIVE  
   ,LA.TERMINATIONDATE  
   ,LFD.MATURITYDATE  
   ,LF.ID 'LEASEFINANCEID'  
   ,ROW_NUMBER() OVER (  
    PARTITION BY LF.CONTRACTID  
    ,LA.ASSETID  
    ,LA.ISACTIVE  
    ,LA.TERMINATIONDATE ORDER BY LF.ID DESC  
     ,LA.ID DESC  
     ,LF.CONTRACTID DESC  
    ) AS ROWNUM  
   ,LF.BOOKINGSTATUS  
   ,LA.ID 'LEASEASSETID'  
   ,LF.ISCURRENT  
   ,LA.FULLYCREDITED  
   ,AST.STATUS  
  FROM #LEASEASSETS LA  
  INNER JOIN #ASSETS AST ON AST.ID = LA.ASSETID  
  INNER JOIN #LEASEFINANCES LF ON LA.LEASEFINANCEID = LF.ID  
  INNER JOIN #LEASEFINANCEDETAILS LFD ON LFD.ID = LF.ID  
  WHERE (  
    LA.ISACTIVE = 1  
    OR LA.TERMINATIONDATE IS NOT NULL  
    )  
   AND (  
    (  
     AST.STATUS = 'Sold'  
     AND LF.ISCURRENT = 0  
     AND LA.ISACTIVE = 1  
     )  
    OR (AST.STATUS <> 'Sold')  
    )  
  ) LEASEASSETINFOES  
 WHERE ROWNUM = 1  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#ASSET_REQ'  
, 'Insertion completed to #ASSET_REQ' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ---------------------------------------------------------------- Update Asset status----------------------------------------------------------------------------  
   
 IF OBJECT_ID(N'TEMPDB..#ASSET_STATUS') IS NOT NULL  
 BEGIN  
  DROP TABLE #ASSET_STATUS  
 END  
  
 SELECT DISTINCT ASSET.ID AS ASSETID  
  ,ASSET.ORIGINALASSETID  
  ,ASSET.STATUS  
  ,LF.CONTRACTID  
  ,(  
   CASE   
    WHEN PAYOFFINFO.PAYOFFEFFECTIVEDATE < LEASEASSETINFOES.MATURITYDATE  
     THEN 'EARLY-'  
    WHEN PAYOFFINFO.PAYOFFEFFECTIVEDATE = LEASEASSETINFOES.MATURITYDATE  
     THEN 'EOL-'  
    WHEN PAYOFFINFO.PAYOFFEFFECTIVEDATE > LEASEASSETINFOES.MATURITYDATE  
     THEN 'MTM-'  
    WHEN LEASEASSETINFOES.MATURITYDATE < GETDATE()  
     THEN 'UPM-'  
    END  
   ) + (  
   CASE   
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      ,N'SOLD'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS = N'ACTIVATED'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = N'EXTENSION'  
     THEN 'AD'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS, '') NOT IN (  
       N'MULTIPLE'  
      ,N'TRANSFERTONEWCONTRACT'  
      ,'_'  
      )  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS NOT IN (  
       N'ACTIVATED'  
      ,N'INACTIVE'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
      N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  
     THEN 'HD'  
    WHEN ASSET.STATUS = N'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = 'PURCHASE'  
     THEN 'BO'  
    WHEN ASSET.STATUS = N'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IN (  
      N'RETURN'  
      ,N'RETURNTOUPGRADE'  
      )  
     THEN 'TD'  
    WHEN ASSET.STATUS = N'SOLD'  
     AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = N'CLASSIFICATIONCHANGE'  
     THEN 'TD'  
    WHEN ASSET.STATUS = N'SCRAP'  
     AND LEASEASSETINFOES.FULLYCREDITED = 1  
     THEN 'TD'  
    ELSE 'UNKNOWN'  
    END  
   ) AS AGGSTATUS  
  ,(  
   CASE   
    WHEN PAYOFFINFO.PAYOFFEFFECTIVEDATE < LEASEASSETINFOES.MATURITYDATE  
     THEN 'EARLY-'  
    WHEN PAYOFFINFO.PAYOFFEFFECTIVEDATE = LEASEASSETINFOES.MATURITYDATE  
     THEN 'EOL-'  
    WHEN PAYOFFINFO.PAYOFFEFFECTIVEDATE > LEASEASSETINFOES.MATURITYDATE  
     THEN 'MTM-'  
    WHEN LEASEASSETINFOES.MATURITYDATE < GETDATE()  
     THEN 'UPM-'  
    END  
   ) + (  
   CASE   
    WHEN ASSET.STATUS IN (  
      N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      ,N'SOLD'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS = N'ACTIVATED'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = N'EXTENSION'  
     THEN 'AD'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS, '') NOT IN (  
       N'MULTIPLE'  
      ,N'TRANSFERTONEWCONTRACT'  
      ,'_'  
      )  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS NOT IN (  
       N'ACTIVATED'  
      ,N'INACTIVE'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
       N'LEASED'  
      ,N'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  
     THEN 'HD'  
    WHEN ASSET.STATUS = N'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = N'PURCHASE'  
     THEN 'BO'  
    WHEN ASSET.STATUS = N'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IN (  
      N'RETURN'  
      ,N'RETURNTOUPGRADE'  
      )  
     THEN 'TD'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = N'CLASSIFICATIONCHANGE'  
     THEN 'TD'  
    WHEN ASSET.STATUS = N'SCRAP'  
     AND LEASEASSETINFOES.FULLYCREDITED = 1  
     THEN 'TD'  
    ELSE 'UNKNOWN'  
    END  
   ) AS AGGSTATUS_CODE  
  ,(  
   CASE   
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL  
     THEN 'ACTIVE'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      ,'SOLD'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS = 'ACTIVATED'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = 'EXTENSION'  
     THEN 'AMENDED'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS, '') NOT IN (  
      'MULTIPLE'  
      ,'TRANSFERTONEWCONTRACT'  
      ,'_'  
      )  
     THEN 'ACTIVE'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS NOT IN (  
      'ACTIVATED'  
      ,'INACTIVE'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL  
     THEN 'ACTIVE'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  
     THEN 'ASSET ON HOLD'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = 'PURCHASE'  
     THEN 'BUY OUT'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IN (  
      'RETURN'  
      ,'RETURNTOUPGRADE'  
      )  
     THEN 'TERMINATED'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = 'CLASSIFICATIONCHANGE'  
     THEN 'TERMINATED'  
    WHEN ASSET.STATUS = 'SCRAP'  
     AND LEASEASSETINFOES.FULLYCREDITED = 1  
     THEN 'TERMINATED'  
    ELSE 'UNKNOWN'  
    END  
   ) AS ASSET_STATUS  
  ,(  
   CASE   
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NULL  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      ,'SOLD'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS = 'ACTIVATED'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = 'EXTENSION'  
     THEN 'AD'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS, '') NOT IN (  
      'MULTIPLE'  
      ,'TRANSFERTONEWCONTRACT'  
      ,'_'  
      )  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.PAYOFF_STATUS NOT IN (  
      'ACTIVATED'  
      ,'INACTIVE'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 0  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IS NOT NULL  
     THEN 'AE'  
    WHEN ASSET.STATUS IN (  
      'LEASED'  
      ,'INVESTORLEASED'  
      )  
     AND PAYOFFINFO.STOPINVOICINGFUTURERENTALS = 1  
     THEN 'HD'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS = 'PURCHASE'  
     THEN 'BO'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFASSETSTATUS IN (  
      'RETURN'  
      ,'RETURNTOUPGRADE'  
      )  
     THEN 'TD'  
    WHEN ASSET.STATUS = 'SOLD'  
     AND PAYOFFINFO.PAYOFFTERMINATIONOPTION = 'CLASSIFICATIONCHANGE'  
     THEN 'TD'  
    WHEN ASSET.STATUS = 'SCRAP'  
     AND LEASEASSETINFOES.FULLYCREDITED = 1  
     THEN 'TD'  
    ELSE 'UNKNOWN'  
    END  
   ) AS ASSET_STATUS_CODE  
  ,PAYOFFINFO.STOPINVOICINGFUTURERENTALS  
  ,PAYOFFINFO.PAYOFF_STATUS  
  ,PAYOFFINFO.PAYOFFEFFECTIVEDATE  
  ,PAYOFFINFO.PAYOFFASSETSTATUS AS PAYOFFASSETS_STATUS  
  ,PAYOFFINFO.PAYOFFAMOUNT_AMOUNT  
  ,PAYOFFINFO.BUYOUTAMOUNT_AMOUNT  
  ,LA.ID AS LEASEASSETID  
  ,PAYOFFINFO.TERMINATIONREASONCONFIGID  
  ,ASSET.LASTREFRESHTIME  
  ,ASSET.UPDATEDTIME  
  ,ASSET.CREATEDTIME  
 INTO #ASSET_STATUS  
 FROM #ASSETS ASSET WITH (NOLOCK)  
 INNER JOIN #LEASEASSETS LA ON LA.ASSETID = ASSET.ID  
 INNER JOIN #LEASEFINANCES LF ON LF.ID = LA.LEASEFINANCEID  
 INNER JOIN #ASSET_REQ LEASEASSETINFOES ON LEASEASSETINFOES.CONTRACTID = LF.CONTRACTID  
  AND LA.ASSETID = LEASEASSETINFOES.ASSETID  
  AND LEASEASSETINFOES.LEASEASSETID = LA.ID  
  AND (  
   LEASEASSETINFOES.STATUS <> N'SCRAP'  
   OR (  
    LEASEASSETINFOES.FULLYCREDITED = 1  
    AND LEASEASSETINFOES.STATUS = N'SCRAP'  
    )  
   )  
 LEFT JOIN (  
  SELECT LEASEASSETID  
   ,ASSETID  
   ,PAYOFF_STATUS  
   ,PAYOFFASSETSTATUS  
   ,STOPINVOICINGFUTURERENTALS  
   ,PAYOFFEFFECTIVEDATE  
   ,CONTRACTID  
   ,PAYOFFTERMINATIONOPTION  
   ,TERMINATIONREASONCONFIGID  
   ,BUYOUTAMOUNT_AMOUNT  
   ,PAYOFFAMOUNT_AMOUNT  
  FROM (  
   SELECT LEASEASSETID  
    ,PAYOFFLEASEASSET.ASSETID  
    ,PAYOFF.STATUS AS PAYOFF_STATUS  
    ,PAYOFFASSET.STATUS AS PAYOFFASSETSTATUS  
    ,STOPINVOICINGFUTURERENTALS  
    ,PAYOFFEFFECTIVEDATE  
    ,PAYOFFLEASEFINANCE.CONTRACTID  
    ,PTO.NAME AS PAYOFFTERMINATIONOPTION  
    ,TERMINATIONREASONCONFIGID  
    ,BUYOUTAMOUNT_AMOUNT  
    ,PAYOFFAMOUNT_AMOUNT  
    ,ROW_NUMBER() OVER (  
     PARTITION BY PAYOFFLEASEASSET.ASSETID  
     ,PAYOFFLEASEFINANCE.CONTRACTID ORDER BY STOPINVOICINGFUTURERENTALS DESC  
      ,ISNULL(PAYOFF.UPDATEDTIME, PAYOFF.CREATEDTIME) DESC  
     ) AS RID  
   FROM #LEASEFINANCES PAYOFFLEASEFINANCE WITH (NOLOCK)  
   JOIN #LEASEASSETS PAYOFFLEASEASSET WITH (NOLOCK) ON PAYOFFLEASEFINANCE.ID = PAYOFFLEASEASSET.LEASEFINANCEID  
    AND PAYOFFLEASEASSET.ISACTIVE = 1  
   JOIN #PAYOFFASSETS PAYOFFASSET WITH (NOLOCK) ON PAYOFFLEASEASSET.ID = PAYOFFASSET.LEASEASSETID  
   INNER JOIN #PAYOFFS PAYOFF WITH (NOLOCK) ON PAYOFF.ID = PAYOFFASSET.PAYOFFID  
    AND PAYOFF.STATUS NOT IN (  
     N'REVERSED'  
     ,N'INACTIVE'  
     )  
   LEFT JOIN DATAHUB_ODESSA.ODH.PAYOFFTERMINATIONOPTIONS PTO WITH (NOLOCK) ON PAYOFF.TERMINATIONOPTIONID = PTO.ID  
   WHERE (  
     PAYOFFASSET.ISACTIVE = 1  
     OR (  
      PTO.NAME = N'CLASSIFICATIONCHANGE'  
      AND PAYOFFASSET.ISACTIVE = 0  
      )  
     OR PAYOFFASSET.STATUS IN (  
       N'PURCHASE'  
      ,N'RETURN'  
      ,N'RETURNTOUPGRADE'  
      ,N'EXTENSION'  
      )  
     )  
    AND ISNULL(PAYOFFASSET.STATUS, '') NOT IN (  
      N'MULTIPLE'  
     ,N'TRANSFERTONEWCONTRACT'  
     ,'_'  
     )  
   ) PAYOFFS  
  WHERE RID = 1  
  ) PAYOFFINFO ON LEASEASSETINFOES.ASSETID = PAYOFFINFO.ASSETID  
  AND LEASEASSETINFOES.CONTRACTID = PAYOFFINFO.CONTRACTID  
  AND PAYOFFINFO.LEASEASSETID = LEASEASSETINFOES.LEASEASSETID  
 WHERE ASSET.STATUS NOT IN (  
   'INVESTOR'  
   ,'COLLATERAL'  
   ,'DONATED'  
   ,'INVENTORY'  
   ,'WRITEOFF'  
   ,'ERROR'  
   ,'COLLATERALONLOAN'  
   ,'COLLATERALPAIDOFF'  
   )  
  AND LEASEASSETINFOES.BOOKINGSTATUS IN (  
   'COMMENCED'  
   ,'FULLYPAIDOFF'  
   ,'TERMINATED'  
   )  
  AND ISNULL(PAYOFFINFO.PAYOFFASSETSTATUS, '') NOT IN (  
   'MULTIPLE'  
   ,'TRANSFERTONEWCONTRACT'  
   ,'_'  
   )  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#PAYOFF_FIELDS'  
, 'Insertion Completed on #ASSET_STATUS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------------------- LOADING OF fields related to payoffs TABLE-----------------------------  
 IF OBJECT_ID(N'TEMPDB..#PAYOFF_FIELDS') IS NOT NULL  
 BEGIN  
  DROP TABLE #PAYOFF_FIELDS  
 END  
  
 SELECT DISTINCT LA.ASSETID  
  ,LA.ID AS LEASEASSETID  
  ,LA.LEASEFINANCEID  
  ,ISNULL((  
    CASE   
     WHEN AST_STATUS.ASSET_STATUS_CODE = 'BO'  
      AND AST_STATUS.BUYOUTAMOUNT_AMOUNT > 0  
      THEN AST_STATUS.BUYOUTAMOUNT_AMOUNT  
     WHEN AST_STATUS.ASSET_STATUS_CODE = 'BO'  
      AND AST_STATUS.PAYOFFAMOUNT_AMOUNT > 0  
      THEN AST_STATUS.PAYOFFAMOUNT_AMOUNT  
     ELSE 0  
     END  
    ), 0) AS BYOUT_AMT  
  ,ISNULL((  
    CASE   
     WHEN AST_STATUS.STATUS = 'SOLD'  
      AND AST_STATUS.PAYOFFASSETS_STATUS IN (  
       'RETURN'  
       ,'RETURNTOUPGRADE'  
       )  
      THEN ISNULL((LA.BOOKEDRESIDUAL_AMOUNT / 2), 0)  
     ELSE 0  
     END  
    ), 0) AS V_TRANSFER_PRICE  
  ,(  
   CASE   
    WHEN AST_STATUS.ASSET_STATUS_CODE = 'HD'  
     THEN TRC.NAME  
    ELSE NULL  
    END  
   ) AS HOLD_STATUS_REASON_CODE  
  ,(  
   CASE   
    WHEN ISNULL((  
       CASE   
        WHEN AST_STATUS.ASSET_STATUS_CODE = 'BO'  
         THEN AST_STATUS.PAYOFFAMOUNT_AMOUNT  
        ELSE 0  
        END  
       ), 0) = 0  
     THEN 'Y'  
    ELSE 'N'  
    END  
   ) AS EXCLUDE_NULL_BUYOUT_AMOUNT  
  ,(  
   CASE   
    WHEN AST_STATUS.ASSET_STATUS_CODE = 'HD'  
     THEN PAYOFFS_ACT_TERM_DATE.TERMINATION_DATE  
    ELSE NULL  
    END  
   ) AS HOLD_EFF_DATE  
  ,(  
   CASE   
    WHEN AST_STATUS.ASSET_STATUS_CODE = 'BO'  
     AND ISNULL(AST_STATUS.PAYOFFAMOUNT_AMOUNT, 0) = 0  
     THEN 'Y'  
    ELSE 'N'  
    END  
   ) AS TRUE_NULL_BO_FLAG  
  ,(  
   CASE   
    WHEN (  
      CASE   
       WHEN AST_STATUS.ASSET_STATUS_CODE <> 'AE'  
        THEN PAYOFFS_ACT_TERM_DATE.TERMINATION_DATE  
       ELSE NULL  
       END  
      ) IS NOT NULL  
     THEN 'Y'  
    ELSE 'N'  
    END  
   ) AS TERMINATION_FLAG  
  ,ISNULL(DATEDIFF(MM, (  
     CASE   
      WHEN AST_STATUS.ASSET_STATUS_CODE <> 'AE'  
       THEN PAYOFFS_ACT_TERM_DATE.TERMINATION_DATE  
      ELSE NULL  
      END  
     ), LFD.MATURITYDATE), 0) AS MONTHS_FROM_MATURITY_TO_TERM  
  ,(  
   CASE   
    WHEN AST_STATUS.ASSET_STATUS_CODE <> 'AE'  
     THEN PAYOFFS_ACT_TERM_DATE.TERMINATION_DATE  
    ELSE NULL  
    END  
   ) AS TERMINATION_DATE  
  ,(  
   CASE   
    WHEN AST_STATUS.ASSET_STATUS_CODE <> 'AE'  
     THEN PAYOFFS_ACT_TERM_DATE.ACTUAL_TERMINATION_DATE  
    ELSE NULL  
    END  
   ) AS ACTUAL_TERMINATION_DATE  
  ,PAYOFFS_ACT_TERM_DATE.POSTDATE  
 INTO #PAYOFF_FIELDS  
 FROM #LEASEFINANCES LF  
 INNER JOIN #LEASEFINANCEDETAILS LFD ON LF.ID = LFD.ID  
 INNER JOIN #LEASEASSETS LA ON LA.LEASEFINANCEID = LFD.ID  
 INNER JOIN #ASSET_STATUS AST_STATUS ON AST_STATUS.ASSETID = LA.ASSETID  
  AND AST_STATUS.CONTRACTID = LF.CONTRACTID  
  AND AST_STATUS.LEASEASSETID = LA.ID  
 LEFT OUTER JOIN DATAHUB_ODESSA.ODH.TERMINATIONREASONCONFIGS(NOLOCK) TRC ON TRC.ID = AST_STATUS.TERMINATIONREASONCONFIGID  
 LEFT OUTER JOIN (  
  SELECT CONTRACTID  
   ,ASSETID  
   ,CAST(MAX(ACTUAL_TERMINATION_DATE) AS DATE) AS ACTUAL_TERMINATION_DATE  
   ,MAX(PAYOFFEFFECTIVEDATE) AS TERMINATION_DATE  
   ,MAX(POSTDATE) AS POSTDATE  
  FROM (  
   SELECT CT.ID AS CONTRACTID  
    ,AST.ID AS ASSETID  
    ,PAYOFFEFFECTIVEDATE  
    ,ISNULL(PY.UPDATEDTIME, PY.CREATEDTIME) AS ACTUAL_TERMINATION_DATE  
    ,PY.POSTDATE  
   FROM #PAYOFFS(NOLOCK) PY  
   INNER JOIN #PAYOFFASSETS(NOLOCK) PYA ON PYA.PAYOFFID = PY.ID  
   INNER JOIN #LEASEASSETS(NOLOCK) LA ON LA.ID = PYA.LEASEASSETID  
   INNER JOIN #ASSETS(NOLOCK) AST ON AST.ID = LA.ASSETID  
   INNER JOIN #LEASEFINANCES(NOLOCK) LF ON LF.ID = LA.LEASEFINANCEID  
   INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.ID = LF.CONTRACTID  
   WHERE PY.STATUS = 'ACTIVATED'  
   ) FINALTEMP  
  GROUP BY CONTRACTID  
   ,ASSETID  
  ) PAYOFFS_ACT_TERM_DATE ON PAYOFFS_ACT_TERM_DATE.CONTRACTID = LF.CONTRACTID  
  AND PAYOFFS_ACT_TERM_DATE.ASSETID = LA.ASSETID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#PAYOFF_FIELDS'  
,  'Insertion completed to #PAYOFF_FIELDS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ----------------------------------- Loading of #RECEIVABLEINVOICEDTL table----------------------  
 IF OBJECT_ID(N'TEMPDB..#RECEIVABLEINVOICEDTL') IS NOT NULL  
 BEGIN  
  DROP TABLE #RECEIVABLEINVOICEDTL  
 END  
  
 SELECT RID.SEQUENCENUMBER  
  ,SUM(INVOICEAMOUNT_AMOUNT) AS INVOICEAMOUNT_AMOUNT  
  ,SUM(INVOICETAXAMOUNT_AMOUNT) AS INVOICETAXAMOUNT_AMOUNT  
  ,SUM(BALANCE_AMOUNT) AS BALANCE_AMOUNT  
  ,SUM(TAXBALANCE_AMOUNT) AS TAXBALANCE_AMOUNT  
 INTO #RECEIVABLEINVOICEDTL  
 FROM [DATAHUB_ODESSA].[ODH].RECEIVABLEINVOICEDETAILS(NOLOCK) RID  
 INNER JOIN #CONTRACTS CT ON CT.SEQUENCENUMBER = RID.SEQUENCENUMBER  
 WHERE RID.ISACTIVE = 1  
 GROUP BY RID.SEQUENCENUMBER  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#RECEIVABLEINVOICEDTL'  
, 'Insertion completed to #RECEIVABLEINVOICEDTL' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------------------- Loading of LEASEPAYMENTSCHEDULES table-----------------------------  
 IF OBJECT_ID(N'TEMPDB..#LEASEPAYMENTSCHEDULES') IS NOT NULL  
 BEGIN  
  DROP TABLE #LEASEPAYMENTSCHEDULES  
 END  
  
 SELECT LPS.LEASEFINANCEDETAILID  
  ,SUM(LPS.AMOUNT_AMOUNT) AS AMOUNT_AMOUNT  
  ,LPS.PAYMENTTYPE  
 INTO #LEASEPAYMENTSCHEDULES  
 FROM [DATAHUB_ODESSA].[ODH].LEASEPAYMENTSCHEDULES(NOLOCK) LPS  
 INNER JOIN #LEASEFINANCEDETAILS LFD ON LFD.ID = LPS.LEASEFINANCEDETAILID  
 WHERE LPS.PAYMENTTYPE = 'OTP'  
  AND ISACTIVE = 1  
 GROUP BY LPS.LEASEFINANCEDETAILID  
  ,LPS.PAYMENTTYPE  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#LEASEPAYMENTSCHEDULES'  
, 'Insertion completed to #LEASEPAYMENTSCHEDULES' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
  
 --------------------------------------------------------------------------Cacluation section---------------------------------------------------------------      
 ------------------------------- Loaded calcuation on #PLUS_TOT_LEASE_RECEIV table    ---------------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#PLUS_TOT_LEASE_RECEIV') IS NOT NULL  
 BEGIN  
  DROP TABLE #PLUS_TOT_LEASE_RECEIV  
 END  
  
 SELECT CT.ID AS CONTRACTID  
  ,RD.ASSETID  
  ,SUM(RD.AMOUNT_AMOUNT) AS PLUS_TOT_LEASE_RECEIV_AMT  
 INTO #PLUS_TOT_LEASE_RECEIV  
 FROM [DATAHUB_ODESSA].[ODH].RECEIVABLEDETAILS(NOLOCK) RD  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLES(NOLOCK) R ON R.ID = RD.RECEIVABLEID  
  AND RD.ISACTIVE = 1  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLECODES(NOLOCK) RC ON RC.ID = R.RECEIVABLECODEID  
  AND R.ISACTIVE = 1  
  AND R.ISDUMMY = 0  
  AND R.ENTITYTYPE = 'CT'  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLETYPES(NOLOCK) RT ON RT.ID = RC.RECEIVABLETYPEID  
 INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.ID = R.ENTITYID  
 WHERE RT.NAME IN (  
   'CAPITALLEASERENTAL'  
   ,'OPERATINGLEASERENTAL'  
   )  
 GROUP BY RD.ASSETID  
  ,CT.ID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#PLUS_TOT_LEASE_RECEIV'  
, 'Insertion completed to #PLUS_TOT_LEASE_RECEIV' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------ Loaded calcuation on #REMAININGRENT table    ---------------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#REMAININGRENT') IS NOT NULL  
 BEGIN  
  DROP TABLE #REMAININGRENT  
 END  
  
 SELECT R.ENTITYID AS CONTRACTID  
  ,RD.ASSETID  
  ,SUM(RD.AMOUNT_AMOUNT) AS REMAININGRENT  
 INTO #REMAININGRENT  
 FROM [DATAHUB_ODESSA].[ODH].RECEIVABLEDETAILS(NOLOCK) RD  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLES(NOLOCK) R ON R.ID = RD.RECEIVABLEID  
  AND RD.ISACTIVE = 1  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLECODES(NOLOCK) RC ON RC.ID = R.RECEIVABLECODEID  
  AND R.ISACTIVE = 1  
  AND R.ISDUMMY = 0  
  AND R.ENTITYTYPE = 'CT'  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLETYPES(NOLOCK) RT ON RT.ID = RC.RECEIVABLETYPEID  
 INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.ID = R.ENTITYID  
 WHERE RT.NAME IN (  
   'CAPITALLEASERENTAL'  
   ,'OPERATINGLEASERENTAL'  
   )  
  AND R.DUEDATE > CAST(GETDATE() AS DATE)  
 GROUP BY R.ENTITYID  
  ,RD.ASSETID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#REMAININGRENT'  
, 'Insertion completed to #REMAININGRENT' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------- Loaded calcuation on #UPM_SUM_APPLIED_CASH     ---------------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#UPM_SUM_APPLIED_CASH') IS NOT NULL  
 BEGIN  
  DROP TABLE #UPM_SUM_APPLIED_CASH  
 END  
  
 SELECT CT.ID AS CONTRACTID  
  ,RDT.ASSETID  
  ,SUM(RARD.AMOUNTAPPLIED_AMOUNT + RARD.TAXAPPLIED_AMOUNT) AS V_UPM_SUM_APPLIED_CASH  
 INTO #UPM_SUM_APPLIED_CASH  
 FROM [DATAHUB_ODESSA].[ODH].RECEIVABLES(NOLOCK) RD  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLEDETAILS(NOLOCK) RDT ON RDT.RECEIVABLEID = RD.ID  
  AND RD.ISACTIVE = 1  
  AND RD.ISDUMMY = 0  
  AND RD.ENTITYTYPE = 'CT'  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLECODES(NOLOCK) RC ON RC.ID = RD.RECEIVABLECODEID  
  AND RDT.ISACTIVE = 1  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLETYPES(NOLOCK) RT ON RT.ID = RC.RECEIVABLETYPEID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIPTAPPLICATIONRECEIVABLEDETAILS(NOLOCK) RARD ON RARD.RECEIVABLEDETAILID = RDT.ID  
  AND RARD.ISACTIVE = 1  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIPTAPPLICATIONS(NOLOCK) RA ON RA.ID = RARD.RECEIPTAPPLICATIONID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIPTS(NOLOCK) RS ON RS.ID = RA.RECEIPTID  
 INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.ID = RD.ENTITYID  
 WHERE RT.NAME = 'OverTermRental'  
  AND RS.RECEIPTCLASSIFICATION = 'Cash'  
 GROUP BY CT.ID  
  ,ASSETID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#UPM_SUM_APPLIED_CASH'  
, 'Insertion completed to #UPM_SUM_APPLIED_CASH' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------- Loaded calcuation on #FEE_AMOUNT_LC     ---------------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#FEE_AMOUNT_LC') IS NOT NULL  
 BEGIN  
  DROP TABLE #FEE_AMOUNT_LC  
 END  
  
 SELECT CT.ID AS CONTRACTID  
  ,RTDT.ASSETID  
  ,sum(RTDT.AMOUNT_AMOUNT) AS FEE_AMOUNT_LC  
  ,RC.NAME AS RECEIVABLECODES_NAME  
  ,RD.DUEDATE  
 INTO #FEE_AMOUNT_LC  
 FROM [DATAHUB_ODESSA].[ODH].RECEIVABLEINVOICEDETAILS(NOLOCK) RID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLEDETAILS(NOLOCK) RTDT ON RTDT.ID = RID.RECEIVABLEDETAILID  
  AND RTDT.ISACTIVE = 1  
  AND RID.ISACTIVE = 1  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLES(NOLOCK) RD ON RD.ID = RTDT.RECEIVABLEID  
  AND RD.ISACTIVE = 1  
  AND RD.ISDUMMY = 0  
  AND RD.ENTITYTYPE = 'CT'  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLECODES(NOLOCK) RC ON RC.ID = RD.RECEIVABLECODEID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLETYPES(NOLOCK) RT ON RT.ID = RC.RECEIVABLETYPEID  
 INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.ID = RD.ENTITYID  
 WHERE RT.Name IN (  
   'LeasePayOff'  
   ,'BuyOut'  
   )  
 GROUP BY CT.ID  
  ,RTDT.ASSETID  
  ,RC.NAME  
  ,RD.DUEDATE  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#FEE_AMOUNT_LC'  
, 'Insertion completed to #FEE_AMOUNT_LC' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------- Loaded calcuation on #UPM_SUM_BILLING_AMT     ---------------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#UPM_SUM_BILLING_AMT') IS NOT NULL  
 BEGIN  
  DROP TABLE #UPM_SUM_BILLING_AMT  
 END  
  
 SELECT CT.ID AS CONTRACTID  
  ,RTDT.ASSETID  
  ,sum(RTDT.AMOUNT_AMOUNT) AS V_UPM_SUM_BILLING_AMT  
 INTO #UPM_SUM_BILLING_AMT  
 FROM [DATAHUB_ODESSA].[ODH].RECEIVABLEINVOICEDETAILS(NOLOCK) RID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLEDETAILS(NOLOCK) RTDT ON RTDT.ID = RID.RECEIVABLEDETAILID  
  AND RTDT.ISACTIVE = 1  
  AND RID.ISACTIVE = 1  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLES(NOLOCK) RD ON RD.ID = RTDT.RECEIVABLEID  
  AND RD.ISACTIVE = 1  
  AND RD.ISDUMMY = 0  
  AND RD.ENTITYTYPE = 'CT'  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLECODES(NOLOCK) RC ON RC.ID = RD.RECEIVABLECODEID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].RECEIVABLETYPES(NOLOCK) RT ON RT.ID = RC.RECEIVABLETYPEID  
 INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.SEQUENCENUMBER = RID.SEQUENCENUMBER  
 WHERE RT.Name = 'OverTermRental'  
 GROUP BY CT.ID  
  ,RTDT.ASSETID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#UPM_SUM_BILLING_AMT'  
, 'Insertion completed to #UPM_SUM_BILLING_AMT' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 ------------------------------- Loaded calcuation on #TERM_REASON    ---------------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#TERM_REASON') IS NOT NULL  
 BEGIN  
  DROP TABLE #TERM_REASON  
 END  
  
 SELECT ASSETID AS ASSETID  
  ,CONTRACTID  
  ,CONT_EXT.CODE AS EXT_CODE  
  ,CONT_BO.CODE AS BO_CODE  
 INTO #TERM_REASON  
 FROM (  
  SELECT LA.ASSETID AS ASSETID  
   ,LF.CONTRACTID AS CONTRACTID  
   ,MAX(PAYOFFS.EXTENSIONREASONCODEID) AS CONT_EXT_ID  
   ,MAX(PAYOFFS.CONTRACTAMENDMENTREASONCODEID) AS CONT_BO_ID  
  FROM #PAYOFFASSETS(NOLOCK) PAYOFFAST  
  INNER JOIN #PAYOFFS(NOLOCK) PAYOFFS ON PAYOFFS.ID = PAYOFFAST.PAYOFFID  
   AND PAYOFFS.STATUS = 'ACTIVATED'  
   AND (  
    PAYOFFS.CONTRACTAMENDMENTREASONCODEID IS NOT NULL  
    OR PAYOFFS.EXTENSIONREASONCODEID IS NOT NULL  
    )  
  INNER JOIN #LEASEASSETS(NOLOCK) LA ON LA.ID = PAYOFFAST.LEASEASSETID  
  INNER JOIN #ASSETS(NOLOCK) AST ON AST.ID = LA.ASSETID  
  INNER JOIN #LEASEFINANCES(NOLOCK) LF ON LF.ID = LA.LEASEFINANCEID  
  INNER JOIN #CONTRACTS(NOLOCK) CT ON CT.ID = LF.CONTRACTID  
  GROUP BY LA.ASSETID  
   ,LF.CONTRACTID  
  ) T_REASONID  
 LEFT OUTER JOIN [DATAHUB_ODESSA].[ODH].CONTRACTAMENDMENTREASONCODES(NOLOCK) CONT_EXT ON CONT_EXT.ID = T_REASONID.CONT_EXT_ID  
  AND CONT_EXT.ISACTIVE = 1  
 LEFT OUTER JOIN [DATAHUB_ODESSA].[ODH].CONTRACTAMENDMENTREASONCODES(NOLOCK) CONT_BO ON CONT_BO.ID = T_REASONID.CONT_BO_ID  
  AND CONT_BO.ISACTIVE = 1  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#TERM_REASON'  
,'Insertion completed to #TERM_REASON' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
 --------------------------------------------------------------------------- End ----------------------------------------------------------------------------  
 --------------------------------------------- end -------------------------------------------------------------    
 ------------------------------------- Drop Temp table if exists-----------------------------------------------------  
 IF OBJECT_ID(N'TEMPDB..#ASSET_RAW_DETAILS') IS NOT NULL  
 BEGIN  
  DROP TABLE #ASSET_RAW_DETAILS  
 END  
    
  
 SELECT CONCAT (  
   CONT.ID  
   ,'_'  
   ,LFD.ID  
   ,'_'  
   ,AST.ID  
   ,'_'  
   ,LA.ID  
   ,'_'  
   ,DR.DERIVED_GEN  
   ) AS [UID]  
  ,AST.ORIGINALPARENTASSETID AS AST_PARENTASSETID  
  ,AST.ID AS AST_ID  
  ,AST.STATUS AS AST_STATUS  
  ,AST.ManufacturerId AS AST_ManufacturerId  
  ,AST.ModelID AS AST_ModelID  
  ,AST.OriginalAssetid AS AST_OriginalAssetid  
  ,AST.Alias AS AST_Alias  
  ,AST.legalEntityid AS AST_legalEntityid  
  ,AST.CustomerID AS AST_CustomerID  
  ,AST.PRODUCTID AS AST_PRODUCTID  
  ,CONT.ID AS CONT_ID  
  ,CONT.SEQUENCENUMBER AS CONT_SEQUENCENUMBER  
  ,DR.ASSET_STATUS_CODE AS ASSET_STATUS_CODE  
  ,DR.DERIVED_GEN AS DERIVED_GEN  
  ,DR.AGGSTATUS AS AGGSTATUS  
  ,DR.AGGSTATUS_CODE AS AGGSTATUS_CODE  
  ,CASE   
   WHEN DR.CUSTOMER_PORTFOLIO_DCSN_TXT IS NULL  
    THEN ''  
   WHEN DR.CUSTOMER_PORTFOLIO_DCSN_TXT IN (  
     'EARLY-AE'  
     ,'EOL-AE'  
     ,'MTM-AE'  
     ,'EARLY-C/A'  
     ,'EOL-C/A'  
     ,'UPM-C/A'  
     ,'MTM-C/A'  
     ,'EARLY-UNKNOWN'  
     ,'EOL-UNKNOWN'  
     ,'MTM-UNKNOWN'  
     ,'UPM-UNKNOWN'  
     )  
    THEN ''  
   ELSE DR.CUSTOMER_PORTFOLIO_DCSN_TXT  
   END AS CUSTOMER_PORTFOLIO_DCSN_TXT  
  ,CASE   
   WHEN DR.MV_AGG_STATUS IS NULL  
    THEN ''  
   WHEN DR.MV_AGG_STATUS IN (  
     'EARLY-AE'  
     ,'EOL-AE'  
     ,'MTM-AE'  
     ,'EARLY-C/A'  
     ,'EOL-C/A'  
     ,'UPM-C/A'  
     ,'MTM-C/A'  
     ,'EARLY-UNKNOWN'  
     ,'EOL-UNKNOWN'  
     ,'MTM-UNKNOWN'  
     ,'UPM-UNKNOWN'  
     )  
    THEN ''  
   ELSE DR.MV_AGG_STATUS  
   END AS MV_AGG_STATUS  
  ,DR.LAST_RESIDUAL_AMOUNT AS LAST_RESIDUAL_AMOUNT  
  ,LF.ID AS LESFIN_ID  
  ,LF.ISCURRENT AS LESFIN_ISCURRENT  
  ,LA.ID AS LESAST_ID  
  ,LA.ISACTIVE AS LESAST_ISACTIVE  
  ,LA.TERMINATIONDATE AS LESAST_TERMINATIONDATE  
  ,LFD.MATURITYDATE AS LESFINDTL_MATURITYDATE  
  ,(  
   CASE   
    WHEN LF.BOOKINGSTATUS IN (  
      'FullyPaidOff'  
      ,'Inactive'  
      )  
     THEN 'Terminated'  
    ELSE 'Booked'  
    END  
   ) AS CONT_CONTRACT_STATUS  
  ,PAYOFFS.BYOUT_AMT  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN > 1  
      THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
     ELSE 0  
     END  
    ), 0) AS V_GEN2_UPM_SUM_APPLIED_CASH  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN = 1  
      THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
     ELSE 0  
     END  
    ), 0) AS V_UPM_SUM_APPLIED_CASH  
  ,ISNULL(PAYOFFS.V_TRANSFER_PRICE + ISNULL((  
     CASE   
      WHEN DR.DERIVED_GEN = 1  
       THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
      ELSE 0  
      END  
     ), 0), 0) AS V_TOTAL_PROCEEDS  
  ,ISNULL(UPM_SUM_BILLING_AMT.V_UPM_SUM_BILLING_AMT, 0) AS UPM_SUM_BILLING_AMT  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN = 1  
      THEN LA.BOOKEDRESIDUAL_AMOUNT  
     ELSE 0  
     END  
    ), 0) AS V_RESIDUAL_AMOUNT  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN > 1  
      THEN LA.BOOKEDRESIDUAL_AMOUNT  
     ELSE 0  
     END  
    ), 0) AS V_GEN2_RESIDUAL_AMOUNT  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN = 1  
      THEN CASE   
        WHEN AST.INITIALASSETCOST_AMOUNT > 0  
         THEN AST.INITIALASSETCOST_AMOUNT  
        ELSE LA.CUSTOMERCOST_AMOUNT  
        END  
     ELSE 0  
     END  
    ), 0) AS V_OEC  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN > 1  
      THEN CASE   
        WHEN AST.INITIALASSETCOST_AMOUNT > 0  
         THEN AST.INITIALASSETCOST_AMOUNT  
        ELSE LA.CUSTOMERCOST_AMOUNT  
        END  
     ELSE 0  
     END  
    ), 0) AS V_GEN2_OEC  
  ,PAYOFFS.V_TRANSFER_PRICE  
  ,ISNULL((  
    CASE   
     WHEN DR.DERIVED_GEN > 1  
      THEN PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
     ELSE 0  
     END  
    ), 0) AS V_GEN2PLUS_TOT_LEASE_RECEIV  
  ,ISNULL(LA.MAXOTPPAYMENT, 0) AS EVERGREEN_PYMTS  
  ,ISNULL(LA.NBV_AMOUNT, 0) AS NET_BOOK_VALUE  
  ,ISNULL(DR.REMAININGRENT, 0) AS REMAINING_RENT  
  ,PAYOFFS.HOLD_STATUS_REASON_CODE  
  ,PAYOFFS.TERMINATION_FLAG  
  ,PAYOFFS.EXCLUDE_NULL_BUYOUT_AMOUNT  
  ,PAYOFFS.MONTHS_FROM_MATURITY_TO_TERM  
  ,(  
   CASE   
    WHEN LA.OTPRENT_AMOUNT > 0  
     THEN 'CONTINUOUS'  
    ELSE 'NO-BILL'  
    END  
   ) AS MATURITY_OPTION  
  ,(  
   CASE   
    WHEN LFD.ISREGULARPAYMENTSTREAM = 1  
     THEN 'FLAT'  
    ELSE 'STEP'  
    END  
   ) AS STEP_PAYMENT_FLAG  
  ,(  
   CASE   
    WHEN ISNULL(LA.BOOKEDRESIDUAL_AMOUNT, 0) > 0  
     THEN 'Y'  
    ELSE 'N'  
    END  
   ) AS RESIDUAL_BEARING_ASSET_FLAG  
  ,(  
   CASE   
    WHEN DR.DERIVED_GEN > 1  
     THEN PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
    ELSE 0  
    END  
   ) AS FTE_PLUSTOTAL_LEASE_RCVBL  
  ,PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT AS TOTAL_LEASE_RCVBL  
  ,FEE_AMOUNT.FEE_AMOUNT_LC  
  ,FEE_AMOUNT.RECEIVABLECODES_NAME  
  ,CASE   
   WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
    THEN FEE_AMOUNT.DUEDATE  
   END AS DUEDATE  
  ,PAYOFFS.HOLD_EFF_DATE  
  ,PAYOFFS.TRUE_NULL_BO_FLAG  
  ,PAYOFFS.TERMINATION_DATE  
  ,PAYOFFS.ACTUAL_TERMINATION_DATE  
  ,PAYOFFS.POSTDATE  
  ,TR.EXT_CODE  
  ,TR.BO_CODE  
  ,(  
   CASE   
    WHEN ((DR.DERIVED_GEN) = 1)  
     THEN (  
       CASE   
        WHEN ((DR.AGGSTATUS) = 'EARLY-TD')  
         THEN 0  
        ELSE (  
          CASE   
           WHEN ((DR.AGGSTATUS) = 'EOL-TD')  
            THEN 0  
           ELSE (  
             CASE   
              WHEN ((DR.AGGSTATUS) = 'MTM-TD')  
               THEN ISNULL((  
                  CASE   
                   WHEN DR.DERIVED_GEN = 1  
                    THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
                   ELSE 0  
                   END  
                  ), 0)  
              ELSE (  
                CASE   
                 WHEN (  
                   (DR.AGGSTATUS) IN (  
                    'EARLY-AD'  
                    ,'EARLY-BO'  
                    ,'EARLY-C/A'  
                    )  
                   )  
                  THEN (  
                    (  
                     (  
                      CASE   
                       WHEN DR.ASSET_STATUS_CODE = 'AD'  
                        THEN 0  
                       ELSE ISNULL((  
                          CASE   
                           WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                            THEN DR.PAYOFFAMOUNT_AMOUNT  
                           ELSE 0  
                           END  
                          ), 0)  
                       END  
                      )  
                     )  
                    ) - ISNULL((  
                     CASE   
                      WHEN (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT) < 0  
                       THEN 0  
                      ELSE (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT)  
                      END  
                     ), 0)  
                 ELSE (  
                   CASE   
                    WHEN (  
                      (DR.AGGSTATUS) IN (  
                       'EOL-AD'  
                       ,'EOL-BO'  
                       ,'EOL-C/A'  
                       )  
                      )  
                     THEN (  
                       (  
                        (  
                         CASE   
                          WHEN DR.ASSET_STATUS_CODE = 'AD'  
                           THEN 0  
                          ELSE ISNULL((  
                             CASE   
                              WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                               THEN DR.PAYOFFAMOUNT_AMOUNT  
                              ELSE 0  
                              END  
                             ), 0)  
                          END  
                         )  
                        )  
                       )  
                    ELSE (  
                      (  
                       (  
                        CASE   
                         WHEN DR.ASSET_STATUS_CODE = 'AD'  
                          THEN 0  
                         ELSE ISNULL((  
                            CASE   
                             WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                              THEN DR.PAYOFFAMOUNT_AMOUNT  
                             ELSE 0  
                             END  
                            ), 0)  
                         END  
                        )  
                       )  
                      ) + ISNULL((  
                       CASE   
                        WHEN DR.DERIVED_GEN = 1  
                         THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
                        ELSE 0  
                        END  
                       ), 0)  
                    END  
                   )  
                 END  
                )  
              END  
             )  
           END  
          )  
        END  
       )  
    ELSE (  
      CASE   
       WHEN (  
         (DR.AGGSTATUS) IN (  
          'EARLY-AD'  
          ,'EARLY-BO'  
          ,'EARLY-C/A'  
          )  
         )  
        THEN (  
          ISNULL((  
            CASE   
             WHEN DR.DERIVED_GEN > 1  
              THEN PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
             ELSE 0  
             END  
            ), 0) + ISNULL((  
            CASE   
             WHEN DR.DERIVED_GEN > 1  
              THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
             ELSE 0  
             END  
            ), 0) + (  
           (  
            (  
             CASE   
              WHEN DR.ASSET_STATUS_CODE = 'AD'  
               THEN 0  
              ELSE ISNULL((  
                 CASE   
                  WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                   THEN DR.PAYOFFAMOUNT_AMOUNT  
                  ELSE 0  
                  END  
                 ), 0)  
              END  
             )  
            )  
           ) - ISNULL((  
            CASE   
             WHEN (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT) < 0  
              THEN 0  
             ELSE (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT)  
             END  
            ), 0)  
          )  
       ELSE (  
         ISNULL((  
           CASE   
            WHEN DR.DERIVED_GEN > 1  
             THEN PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
            ELSE 0  
            END  
           ), 0) + ISNULL((  
           CASE   
            WHEN DR.DERIVED_GEN > 1  
             THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
            ELSE 0  
            END  
           ), 0) + (  
          (  
           (  
            CASE   
             WHEN DR.ASSET_STATUS_CODE = 'AD'  
              THEN 0  
             ELSE ISNULL((  
                CASE   
                 WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                  THEN DR.PAYOFFAMOUNT_AMOUNT  
                 ELSE 0  
                 END  
                ), 0)  
             END  
            )  
           )  
          )  
         )  
       END  
      )  
    END  
   ) AS CALCULATED_REVENUE  
  ,(  
   CASE   
    WHEN ((DR.DERIVED_GEN) = 1)  
     THEN (  
       CASE   
        WHEN ((DR.AGGSTATUS) = 'EARLY-TD')  
         THEN 0  
        ELSE (  
          CASE   
           WHEN ((DR.AGGSTATUS) = 'EOL-TD')  
            THEN 0  
           ELSE (  
             CASE   
              WHEN ((DR.AGGSTATUS) = 'MTM-TD')  
               THEN (  
                 ISNULL((  
                   CASE   
                    WHEN DR.DERIVED_GEN = 1  
                     THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
                    ELSE 0  
                    END  
                   ), 0)  
                 ) * (CURR_EXCH_RATE)  
              ELSE (  
                CASE   
                 WHEN (  
                   (DR.AGGSTATUS) IN (  
                    'EARLY-AD'  
                    ,'EARLY-BO'  
                    ,'EARLY-C/A'  
                    )  
                   )  
                  THEN (  
                    (  
                     (  
                      CASE   
                       WHEN DR.ASSET_STATUS_CODE = 'AD'  
                        THEN 0  
                       ELSE ISNULL((  
                          CASE   
                           WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                            THEN DR.PAYOFFAMOUNT_AMOUNT  
                           ELSE 0  
                           END  
                          ), 0)  
                       END  
                      )  
                     )  
                    ) - ISNULL((  
                     CASE   
                      WHEN (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT) < 0  
                       THEN 0  
                      ELSE (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT)  
                      END  
                     ), 0) * (CURR_EXCH_RATE)  
                 ELSE (  
                   CASE   
                    WHEN (  
                      (DR.AGGSTATUS) IN (  
                       'EOL-AD'  
                       ,'EOL-BO'  
                       ,'EOL-C/A'  
                       )  
                      )  
                     THEN (  
                       (  
                        (  
                         CASE   
                          WHEN DR.ASSET_STATUS_CODE = 'AD'  
                           THEN 0  
                          ELSE ISNULL((  
                             CASE   
                              WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                               THEN DR.PAYOFFAMOUNT_AMOUNT  
                              ELSE 0  
                              END  
                             ), 0)  
                          END  
                         )  
                        )  
                       ) * (CURR_EXCH_RATE)  
                    ELSE (  
                      (  
                       (  
                        CASE   
                         WHEN DR.ASSET_STATUS_CODE = 'AD'  
                          THEN 0  
                         ELSE ISNULL((  
                            CASE   
                             WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                              THEN DR.PAYOFFAMOUNT_AMOUNT  
                             ELSE 0  
                             END  
                            ), 0)  
                         END  
                        )  
                       )  
                      ) + ISNULL((  
                       CASE   
                        WHEN DR.DERIVED_GEN = 1  
                         THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
                        ELSE 0  
                        END  
                       ), 0) * (CURR_EXCH_RATE)  
                    END  
                   )  
                 END  
                )  
              END  
             )  
           END  
          )  
        END  
       )  
    ELSE (  
      CASE   
       WHEN (  
         (DR.AGGSTATUS) IN (  
          'EARLY-AD'  
          ,'EARLY-BO'  
          ,'EARLY-C/A'  
          )  
         )  
        THEN (  
          ISNULL((  
            CASE   
             WHEN DR.DERIVED_GEN > 1  
              THEN PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
             ELSE 0  
             END  
            ), 0) + ISNULL((  
            CASE   
             WHEN DR.DERIVED_GEN > 1  
              THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
             ELSE 0  
             END  
            ), 0) + (  
           (  
            (  
             CASE   
              WHEN DR.ASSET_STATUS_CODE = 'AD'  
               THEN 0  
              ELSE ISNULL((  
                 CASE   
                  WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                   THEN DR.PAYOFFAMOUNT_AMOUNT  
                  ELSE 0  
                  END  
                 ), 0)  
              END  
             )  
            )  
           ) - ISNULL((  
            CASE   
             WHEN (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT) < 0  
              THEN 0  
             ELSE (DATEDIFF(MM, CAST(GETDATE() AS DATE), LFD.MATURITYDATE) * LA.RENT_AMOUNT)  
             END  
            ), 0)  
          ) * (CURR_EXCH_RATE)  
       ELSE (  
         ISNULL((  
           CASE   
            WHEN DR.DERIVED_GEN > 1  
             THEN PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
            ELSE 0  
            END  
           ), 0) + ISNULL((  
           CASE   
            WHEN DR.DERIVED_GEN > 1  
             THEN (UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH)  
            ELSE 0  
            END  
           ), 0) + (  
          (  
           (  
            CASE   
             WHEN DR.ASSET_STATUS_CODE = 'AD'  
              THEN 0  
             ELSE ISNULL((  
                CASE   
                 WHEN DR.PAYOFFASSETS_STATUS = 'PURCHASE'  
                  THEN DR.PAYOFFAMOUNT_AMOUNT  
                 ELSE 0  
                 END  
                ), 0)  
             END  
            )  
           )  
          ) * (CURR_EXCH_RATE)  
         )  
       END  
      )  
    END  
   ) AS CALCULATED_REVENUE_USD  
  ,ROOT_CONTRACT_ID  
  ,ROOT_CONTRACT_MATURITY_DATE  
  ,ROOT_TERMINATION_DATE  
  ,ROOT_TRANSACTION_TYPE  
  ,ROOT_CONTRACT_DETAIL_STATUS_CODE  
  ,ROOT_CONTRACT_DETAIL_TYPE_CODE  
  ,ROOT_CONTRACT_NUMBER  
  ,ROOT_ID_EP_CONTRACT_HEADER  
  ,ROOT_CONTRACT_START_DATE  
  ,ROOT_ASSET_ID  
  ,ROOT_RESIDUAL_AMOUNT  
  ,VENDOR_COMPANY_NAME  
  ,VENDOR_COMPANY_ID  
  ,HASHBYTES('MD5', CONCAT (  
    AST.ID  
    ,AST.STATUS  
    ,AST.MANUFACTURERID  
    ,AST.MODELID  
    ,AST.ORIGINALPARENTASSETID  
    ,AST.ALIAS  
    ,AST.LEGALENTITYID  
    ,AST.CUSTOMERID  
    ,AST.PRODUCTID  
    ,AST.INITIALASSETCOST_AMOUNT  
    ,CONT.ID  
    ,LF.BOOKINGSTATUS  
    ,LFD.ID  
    ,LFD.ISOVERTERMLEASE  
    ,PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
    ,LFD.ISREGULARPAYMENTSTREAM  
    ,LFD.MATURITYDATE  
    ,LA.ID  
    ,LA.TERMINATIONDATE  
    ,LA.CUSTOMERCOST_AMOUNT  
    ,LA.BOOKEDRESIDUAL_AMOUNT  
    ,LA.CUSTOMEREXPECTEDRESIDUAL_AMOUNT  
    ,LA.RENT_AMOUNT  
    ,LA.BLINDDISCOUNTPERCENTAGE  
    ,LA.OTPRENT_AMOUNT  
    ,LA.MAXOTPPAYMENT  
    ,LA.NBV_AMOUNT  
    ,LEASEPAYMENTSCHEDULES.PAYMENTTYPE  
    ,LEASEPAYMENTSCHEDULES.AMOUNT_AMOUNT  
    ,UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH  
    ,UPM_SUM_BILLING_AMT.V_UPM_SUM_BILLING_AMT  
    ,FEE_AMOUNT.FEE_AMOUNT_LC  
    ,FEE_AMOUNT.RECEIVABLECODES_NAME  
    ,FEE_AMOUNT.DUEDATE  
    ,PAYOFFS.HOLD_EFF_DATE  
    ,PAYOFFS.TRUE_NULL_BO_FLAG  
    ,PAYOFFS.TERMINATION_DATE  
    ,PAYOFFS.ACTUAL_TERMINATION_DATE  
    ,PAYOFFS.POSTDATE  
    ,TR.EXT_CODE  
    ,TR.BO_CODE  
    ,DR.STOPINVOICINGFUTURERENTALS  
    ,DR.PAYOFF_STATUS  
    ,DR.PAYOFFEFFECTIVEDATE  
    ,DR.PAYOFFASSETS_STATUS  
    ,DR.PAYOFFAMOUNT_AMOUNT  
    ,[DATAHUB_ODESSA].[ODH].DEALPRODUCTTYPES.LEASETYPE  
    ,DR.ASSET_STATUS_CODE  
    ,DR.DERIVED_GEN  
    ,DR.AGGSTATUS  
    ,DR.CUSTOMER_PORTFOLIO_DCSN_TXT  
    ,DR.MV_AGG_STATUS  
    ,DR.LAST_RESIDUAL_AMOUNT  
    ,LF.ID  
    ,LF.ISCURRENT  
    ,LA.ID  
    ,LA.ISACTIVE  
    ,DR.AGGSTATUS_CODE  
    ,DR.REMAININGRENT  
    ,VENDOR_COMPANY_NAME  
    ,VENDOR_COMPANY_ID  
    )) AS CRC  
  ,CONVERT(DATETIME, (  
    SELECT MAX(T.UPDATEDTIME)  
    FROM (  
     VALUES (ISNULL(CONT.LASTREFRESHTIME, CONT.UPDATEDTIME))  
      ,(ISNULL(CONT.UPDATEDTIME, CONT.CREATEDTIME))  
      ,(ISNULL(LF.LASTREFRESHTIME, LF.UPDATEDTIME))  
      ,(ISNULL(LF.UPDATEDTIME, LF.CREATEDTIME))  
      ,(ISNULL(LFD.LASTREFRESHTIME, LFD.UPDATEDTIME))  
      ,(ISNULL(LFD.UPDATEDTIME, LFD.CREATEDTIME))  
      ,(ISNULL(AST.LASTREFRESHTIME, AST.UPDATEDTIME))  
      ,(ISNULL(AST.UPDATEDTIME, AST.CREATEDTIME))  
      ,(ISNULL(LA.LASTREFRESHTIME, LA.UPDATEDTIME))  
      ,(ISNULL(LA.UPDATEDTIME, LA.CREATEDTIME))  
     ) AS T(UPDATEDTIME)  
    )) AS [USERMODIFIEDTIMESTAMP]  
  ,GETDATE() AS LASTREFRESHTIME  
 INTO #ASSET_RAW_DETAILS  
 FROM #CONTRACTS AS CONT  
 INNER JOIN #LEASEFINANCES LF ON LF.CONTRACTID = CONT.ID  
 INNER JOIN #LEASEFINANCEDETAILS LFD ON LF.ID = LFD.ID  
 INNER JOIN [DATAHUB_ODESSA].[ODH].CURRENCIES(NOLOCK) ON [DATAHUB_ODESSA].[ODH].CURRENCIES.CURRENCYCODEID = CONT.CURRENCYID  
 INNER JOIN [DatahubPMR].[v_Exchange_Currency_Rate](NOLOCK) CR ON CR.QT_CURR_CD = [DATAHUB_ODESSA].[ODH].CURRENCIES.NAME  
 INNER JOIN #LEASEASSETS LA ON LA.LEASEFINANCEID = LF.ID  
 INNER JOIN #ASSETS AST ON AST.ID = LA.ASSETID  
 INNER JOIN [DatahubPMR].[TBL_DERIVED_GEN_FINAL](NOLOCK) DR ON DR.ASSETID = AST.ID  
  AND DR.CONTRACTID = LF.CONTRACTID  
  AND DR.LEASEASSETID = LA.ID  
 LEFT OUTER JOIN #RECEIVABLEINVOICEDTL AS RECEIVABLEINVOICEDETAILS ON RECEIVABLEINVOICEDETAILS.SEQUENCENUMBER = CONT.SEQUENCENUMBER  
 LEFT OUTER JOIN #PLUS_TOT_LEASE_RECEIV AS PLUS_TOT_LEASE_RECEIV ON PLUS_TOT_LEASE_RECEIV.CONTRACTID = CONT.ID  
  AND PLUS_TOT_LEASE_RECEIV.ASSETID = AST.ID  
 LEFT OUTER JOIN #UPM_SUM_APPLIED_CASH AS UPM_SUM_APPLIED_CASH ON UPM_SUM_APPLIED_CASH.CONTRACTID = CONT.ID  
  AND UPM_SUM_APPLIED_CASH.ASSETID = AST.ID  
 LEFT OUTER JOIN #UPM_SUM_BILLING_AMT AS UPM_SUM_BILLING_AMT ON UPM_SUM_BILLING_AMT.CONTRACTID = CONT.ID  
  AND UPM_SUM_BILLING_AMT.ASSETID = AST.ID  
 LEFT OUTER JOIN #FEE_AMOUNT_LC AS FEE_AMOUNT ON FEE_AMOUNT.CONTRACTID = CONT.ID  
  AND FEE_AMOUNT.ASSETID = AST.ID  
 LEFT OUTER JOIN #TERM_REASON AS TR ON TR.CONTRACTID = CONT.ID  
  AND TR.ASSETID = AST.ID  
 LEFT OUTER JOIN #PAYOFF_FIELDS AS PAYOFFS ON PAYOFFS.LEASEFINANCEID = LF.ID  
  AND PAYOFFS.ASSETID = AST.ID  
  AND PAYOFFS.LEASEASSETID = LA.ID  
 LEFT OUTER JOIN #LEASEPAYMENTSCHEDULES AS LEASEPAYMENTSCHEDULES ON LEASEPAYMENTSCHEDULES.LEASEFINANCEDETAILID = LFD.ID  
 LEFT OUTER JOIN [DATAHUB_ODESSA].[ODH].DEALPRODUCTTYPES(NOLOCK) ON [DATAHUB_ODESSA].[ODH].DEALPRODUCTTYPES.ID = CONT.DEALPRODUCTTYPEID  
 GROUP BY AST.ORIGINALPARENTASSETID  
  ,AST.ID  
  ,AST.STATUS  
  ,AST.MANUFACTURERID  
  ,AST.MODELID  
  ,AST.ORIGINALASSETID  
  ,AST.ALIAS  
  ,AST.LEGALENTITYID  
  ,AST.CUSTOMERID  
  ,AST.PRODUCTID  
  ,AST.UPDATEDTIME  
  ,AST.CREATEDTIME  
  ,AST.LASTREFRESHTIME  
  ,AST.INITIALASSETCOST_AMOUNT  
  ,CONT.ID  
  ,CONT.SEQUENCENUMBER  
  ,LF.BOOKINGSTATUS  
  ,CONT.UPDATEDTIME  
  ,CONT.CREATEDTIME  
  ,CONT.LASTREFRESHTIME  
  ,LFD.UPDATEDTIME  
  ,LFD.CREATEDTIME  
  ,LFD.LASTREFRESHTIME  
  ,LFD.ID  
  ,LFD.ISOVERTERMLEASE  
  ,LF.LASTREFRESHTIME  
  ,LF.UPDATEDTIME  
  ,LF.CREATEDTIME  
  ,PLUS_TOT_LEASE_RECEIV.PLUS_TOT_LEASE_RECEIV_AMT  
  ,LFD.ISREGULARPAYMENTSTREAM  
  ,LFD.MATURITYDATE  
  ,LA.ID  
  ,LA.TERMINATIONDATE  
  ,LA.CUSTOMERCOST_AMOUNT  
  ,LA.BOOKEDRESIDUAL_AMOUNT  
  ,LA.CUSTOMEREXPECTEDRESIDUAL_AMOUNT  
  ,LA.RENT_AMOUNT  
  ,LA.BLINDDISCOUNTPERCENTAGE  
  ,LA.OTPRENT_AMOUNT  
  ,LA.MAXOTPPAYMENT  
  ,LA.NBV_AMOUNT  
  ,LA.UPDATEDTIME  
  ,LA.CREATEDTIME  
  ,LA.LASTREFRESHTIME  
  ,LEASEPAYMENTSCHEDULES.PAYMENTTYPE  
  ,LEASEPAYMENTSCHEDULES.AMOUNT_AMOUNT  
  ,UPM_SUM_APPLIED_CASH.V_UPM_SUM_APPLIED_CASH  
  ,UPM_SUM_BILLING_AMT.V_UPM_SUM_BILLING_AMT  
  ,FEE_AMOUNT.FEE_AMOUNT_LC  
  ,FEE_AMOUNT.RECEIVABLECODES_NAME  
  ,FEE_AMOUNT.DUEDATE  
  ,PAYOFFS.BYOUT_AMT  
  ,PAYOFFS.V_TRANSFER_PRICE  
  ,PAYOFFS.HOLD_STATUS_REASON_CODE  
  ,PAYOFFS.EXCLUDE_NULL_BUYOUT_AMOUNT  
  ,PAYOFFS.MONTHS_FROM_MATURITY_TO_TERM  
  ,PAYOFFS.HOLD_EFF_DATE  
  ,PAYOFFS.TRUE_NULL_BO_FLAG  
  ,PAYOFFS.TERMINATION_FLAG  
  ,PAYOFFS.TERMINATION_DATE  
  ,PAYOFFS.ACTUAL_TERMINATION_DATE  
  ,PAYOFFS.POSTDATE  
  ,TR.EXT_CODE  
  ,TR.BO_CODE  
  ,DR.STOPINVOICINGFUTURERENTALS  
  ,DR.PAYOFF_STATUS  
  ,DR.PAYOFFEFFECTIVEDATE  
  ,DR.PAYOFFASSETS_STATUS  
  ,DR.PAYOFFAMOUNT_AMOUNT  
  ,[DATAHUB_ODESSA].[ODH].DEALPRODUCTTYPES.LEASETYPE  
  ,DR.ASSET_STATUS_CODE  
  ,DR.DERIVED_GEN  
  ,DR.CUSTOMER_PORTFOLIO_DCSN_TXT  
  ,DR.MV_AGG_STATUS  
  ,DR.AGGSTATUS  
  ,CURR_EXCH_RATE  
  ,DR.LAST_RESIDUAL_AMOUNT  
  ,LF.ID  
  ,LF.ISCURRENT  
  ,LA.ID  
  ,LA.ISACTIVE  
  ,DR.AGGSTATUS_CODE  
  ,DR.REMAININGRENT  
  ,ROOT_CONTRACT_ID  
  ,ROOT_CONTRACT_MATURITY_DATE  
  ,ROOT_TERMINATION_DATE  
  ,ROOT_TRANSACTION_TYPE  
  ,ROOT_CONTRACT_DETAIL_STATUS_CODE  
  ,ROOT_CONTRACT_DETAIL_TYPE_CODE  
  ,ROOT_CONTRACT_NUMBER  
  ,ROOT_ID_EP_CONTRACT_HEADER  
  ,ROOT_CONTRACT_START_DATE  
  ,ROOT_ASSET_ID  
  ,ROOT_RESIDUAL_AMOUNT  
  ,VENDOR_COMPANY_NAME  
  ,VENDOR_COMPANY_ID  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'#ASSET_RAW_DETAILS'  
,'Insertion Completed on #ASSET_RAW_DETAILS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
   
   
  
 ---INERTING FRESH RECORDS INTO #SOURCE_ASSET_RAW_DETAILS----------------------------  
INSERT INTO DATAHUBPMR.SOURCE_ASSET_RAW_DETAILS(    
  UID  
  ,AST_PARENTASSETID  
  ,AST_ID  
  ,AST_STATUS  
  ,AST_MANUFACTURERID  
  ,AST_MODELID  
  ,AST_ORIGINALASSETID  
  ,AST_ALIAS  
  ,AST_LEGALENTITYID  
  ,AST_CUSTOMERID  
  ,AST_PRODUCTID  
  ,CONT_ID  
  ,CONT_SEQUENCENUMBER  
  ,ASSET_STATUS_CODE  
  ,DERIVED_GEN  
  ,AGGSTATUS  
  ,AGGSTATUS_CODE  
  ,CUSTOMER_PORTFOLIO_DCSN_TXT  
  ,MV_AGG_STATUS  
  ,LAST_RESIDUAL_AMOUNT  
  ,LESFIN_ID  
  ,LESFIN_ISCURRENT  
  ,LESAST_ID  
  ,LESAST_ISACTIVE  
  ,LESAST_TERMINATIONDATE  
  ,LESFINDTL_MATURITYDATE  
  ,CONT_CONTRACT_STATUS  
  ,BYOUT_AMT  
  ,V_GEN2_UPM_SUM_APPLIED_CASH  
  ,V_UPM_SUM_APPLIED_CASH  
  ,V_TOTAL_PROCEEDS  
  ,UPM_SUM_BILLING_AMT  
  ,V_RESIDUAL_AMOUNT  
  ,V_GEN2_RESIDUAL_AMOUNT  
  ,V_OEC  
  ,V_GEN2_OEC  
  ,V_TRANSFER_PRICE  
  ,V_GEN2PLUS_TOT_LEASE_RECEIV  
  ,EVERGREEN_PYMTS  
  ,NET_BOOK_VALUE  
  ,REMAINING_RENT  
  ,HOLD_STATUS_REASON_CODE  
  ,TERMINATION_FLAG  
  ,EXCLUDE_NULL_BUYOUT_AMOUNT  
  ,MONTHS_FROM_MATURITY_TO_TERM  
  ,TERMINATION_DATE  
  ,ACTUAL_TERMINATION_DATE  
  ,POSTDATE  
  ,EXT_CODE  
  ,BO_CODE  
  ,MATURITY_OPTION  
  ,STEP_PAYMENT_FLAG  
  ,RESIDUAL_BEARING_ASSET_FLAG  
  ,FTE_PLUSTOTAL_LEASE_RCVBL  
  ,TOTAL_LEASE_RCVBL  
  ,FEE_AMOUNT_LC  
  ,RECEIVABLECODES_NAME  
  ,DUEDATE  
  ,HOLD_EFF_DATE  
  ,TRUE_NULL_BO_FLAG  
  ,CALCULATED_REVENUE  
  ,CALCULATED_REVENUE_USD  
  ,ROOT_CONTRACT_ID  
  ,ROOT_CONTRACT_MATURITY_DATE  
  ,ROOT_TERMINATION_DATE  
  ,ROOT_TRANSACTION_TYPE  
  ,ROOT_CONTRACT_DETAIL_STATUS_CODE  
  ,ROOT_CONTRACT_DETAIL_TYPE_CODE  
  ,ROOT_CONTRACT_NUMBER  
  ,ROOT_ID_EP_CONTRACT_HEADER  
  ,ROOT_CONTRACT_START_DATE  
  ,ROOT_ASSET_ID  
  ,ROOT_RESIDUAL_AMOUNT  
  ,VENDOR_COMPANY_NAME  
  ,VENDOR_COMPANY_ID  
  ,CRC  
  ,USERMODIFIEDTIMESTAMP  
  ,LASTREFRESHTIME  
  )  
 SELECT CRD.UID  
  ,CRD.AST_PARENTASSETID  
  ,CRD.AST_ID  
  ,CRD.AST_STATUS  
  ,CRD.AST_MANUFACTURERID  
  ,CRD.AST_MODELID  
  ,CRD.AST_ORIGINALASSETID  
  ,CRD.AST_ALIAS  
  ,CRD.AST_LEGALENTITYID  
  ,CRD.AST_CUSTOMERID  
  ,CRD.AST_PRODUCTID  
  ,CRD.CONT_ID  
  ,CRD.CONT_SEQUENCENUMBER  
  ,CRD.ASSET_STATUS_CODE  
  ,CRD.DERIVED_GEN  
  ,CRD.AGGSTATUS  
  ,CRD.AGGSTATUS_CODE  
  ,CRD.CUSTOMER_PORTFOLIO_DCSN_TXT  
  ,CRD.MV_AGG_STATUS  
  ,CRD.LAST_RESIDUAL_AMOUNT  
  ,CRD.LESFIN_ID  
  ,CRD.LESFIN_ISCURRENT  
  ,CRD.LESAST_ID  
  ,CRD.LESAST_ISACTIVE  
  ,CRD.LESAST_TERMINATIONDATE  
  ,CRD.LESFINDTL_MATURITYDATE  
  ,CRD.CONT_CONTRACT_STATUS  
  ,CRD.BYOUT_AMT  
  ,CRD.V_GEN2_UPM_SUM_APPLIED_CASH  
  ,CRD.V_UPM_SUM_APPLIED_CASH  
  ,CRD.V_TOTAL_PROCEEDS  
  ,CRD.UPM_SUM_BILLING_AMT  
  ,CRD.V_RESIDUAL_AMOUNT  
  ,CRD.V_GEN2_RESIDUAL_AMOUNT  
  ,CRD.V_OEC  
  ,CRD.V_GEN2_OEC  
  ,CRD.V_TRANSFER_PRICE  
  ,CRD.V_GEN2PLUS_TOT_LEASE_RECEIV  
  ,CRD.EVERGREEN_PYMTS  
  ,CRD.NET_BOOK_VALUE  
  ,CRD.REMAINING_RENT  
  ,CRD.HOLD_STATUS_REASON_CODE  
  ,CRD.TERMINATION_FLAG  
  ,CRD.EXCLUDE_NULL_BUYOUT_AMOUNT  
  ,CRD.MONTHS_FROM_MATURITY_TO_TERM  
  ,CRD.TERMINATION_DATE  
  ,CRD.ACTUAL_TERMINATION_DATE  
  ,CRD.POSTDATE  
  ,CRD.EXT_CODE  
  ,CRD.BO_CODE  
  ,CRD.MATURITY_OPTION  
  ,CRD.STEP_PAYMENT_FLAG  
  ,CRD.RESIDUAL_BEARING_ASSET_FLAG  
  ,CRD.FTE_PLUSTOTAL_LEASE_RCVBL  
  ,CRD.TOTAL_LEASE_RCVBL  
  ,CRD.FEE_AMOUNT_LC  
  ,CRD.RECEIVABLECODES_NAME  
  ,CRD.DUEDATE  
  ,CRD.HOLD_EFF_DATE  
  ,CRD.TRUE_NULL_BO_FLAG  
  ,CRD.CALCULATED_REVENUE  
  ,CRD.CALCULATED_REVENUE_USD  
  ,CRD.ROOT_CONTRACT_ID  
  ,CRD.ROOT_CONTRACT_MATURITY_DATE  
  ,CRD.ROOT_TERMINATION_DATE  
  ,CRD.ROOT_TRANSACTION_TYPE  
  ,CRD.ROOT_CONTRACT_DETAIL_STATUS_CODE  
  ,CRD.ROOT_CONTRACT_DETAIL_TYPE_CODE  
  ,CRD.ROOT_CONTRACT_NUMBER  
  ,CRD.ROOT_ID_EP_CONTRACT_HEADER  
  ,CRD.ROOT_CONTRACT_START_DATE  
  ,CRD.ROOT_ASSET_ID  
  ,CRD.ROOT_RESIDUAL_AMOUNT  
  ,CRD.VENDOR_COMPANY_NAME  
  ,CRD.VENDOR_COMPANY_ID  
  ,CRD.CRC  
  ,CRD.USERMODIFIEDTIMESTAMP  
  ,CRD.LASTREFRESHTIME  
FROM                         #ASSET_RAW_DETAILS CRD  
LEFT OUTER JOIN [DatahubPMR].[ASSET_RAW_DETAILS]  (NOLOCK)  CRDS ON CRD.[UID]=CRDS.[UID]   
WHERE 1=CASE    
             WHEN CRDS.CRC IS NULL THEN 1     
             WHEN CRDS.CRC IS NOT NULL AND CRD.CRC != CRDS.CRC  THEN 1    
             ELSE 0    
        END  
  
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'SOURCE_ASSET_RAW_DETAILS'  
,'Insertion completed on SOURCE_ASSET_RAW_DETAILS' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
  ----------------------------------   Data validation Part -----------------------------------------------------------------------------  
  
   
----------------------------------------------- Update Root Contract information for migrated contracts which is extended---------------------    
IF OBJECT_ID(N'TEMPDB..#ROOT_TBL_MIG')  IS NOT NULL    
   BEGIN    
   DROP TABLE #ROOT_TBL_MIG    
   END    
    
SELECT             ROW_NUMBER() OVER (PARTITION BY CTR.SEQUENCENUMBER ORDER BY CTR.SEQUENCENUMBER  DESC) AS ROWNUM    
                   ,CTR.SEQUENCENUMBER    
                  ,ROOT_CONTRACT_MATURITY_DATE    
                  ,ROOT_TERMINATION_DATE    
                  ,ROOT_TRANSACTION_TYPE    
                  ,ROOT_CONTRACT_DETAIL_STATUS_CODE    
                  ,ROOT_CONTRACT_DETAIL_TYPE_CODE    
                  ,ROOT_CONTRACT_NUMBER    
                  ,ROOT_ID_EP_CONTRACT_HEADER    
                  ,ROOT_CONTRACT_START_DATE    
                  ,'' AS ROOT_ASSET_ID    
                  ,ROOT_RESIDUAL_AMOUNT    
      ,ROOT_AGG_STATUS    
      INTO #ROOT_TBL_MIG FROM  [DatahubPMR].[ASSET_HISTORIES_ROOT_CONT](NOLOCK) AHRC    
                      INNER JOIN    
                      #CONTRACTS(NOLOCK) CTR ON AHRC.ROOT_CONTRACT_NUMBER=CTR.EXTERNALREFERENCENUMBER AND CTR.EXTERNALREFERENCENUMBER IS NOT NULL AND CTR.EXTERNALREFERENCENUMBER<>CTR.SEQUENCENUMBER    
    
------------------------------- Delete duplicate records-----------------------------------------------------------------------------    
DELETE FROM #ROOT_TBL_MIG WHERE ROWNUM<>1    
    
------------------------- Update information in SOURCE_ASSET_RAW_DETAILS table ----------------------    
         UPDATE ARD SET     
                ARD.ROOT_CONTRACT_MATURITY_DATE=RTM.ROOT_CONTRACT_MATURITY_DATE    
                ,ARD.ROOT_TERMINATION_DATE=RTM.ROOT_TERMINATION_DATE    
                ,ARD.ROOT_TRANSACTION_TYPE=RTM.ROOT_TRANSACTION_TYPE    
                ,ARD.ROOT_CONTRACT_DETAIL_STATUS_CODE=RTM.ROOT_CONTRACT_DETAIL_STATUS_CODE    
                ,ARD.ROOT_CONTRACT_DETAIL_TYPE_CODE=RTM.ROOT_CONTRACT_DETAIL_TYPE_CODE    
                ,ARD.ROOT_CONTRACT_NUMBER=RTM.ROOT_CONTRACT_NUMBER    
                ,ARD.ROOT_ID_EP_CONTRACT_HEADER=RTM.ROOT_ID_EP_CONTRACT_HEADER    
                ,ARD.ROOT_CONTRACT_START_DATE=RTM.ROOT_CONTRACT_START_DATE    
                ,ARD.ROOT_ASSET_ID=RTM.ROOT_ASSET_ID    
                ,ARD.ROOT_RESIDUAL_AMOUNT=RTM.ROOT_RESIDUAL_AMOUNT    
         FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS] ARD    
              INNER JOIN     
              #ROOT_TBL_MIG(NOLOCK)RTM ON RTM.SEQUENCENUMBER=ARD.CONT_SEQUENCENUMBER    
             
------------------------- Update information in ASSET_RAW_DETAILS table ----------------------    
         UPDATE ARD SET     
                ARD.ROOT_CONTRACT_MATURITY_DATE=RTM.ROOT_CONTRACT_MATURITY_DATE    
                ,ARD.ROOT_TERMINATION_DATE=RTM.ROOT_TERMINATION_DATE    
                ,ARD.ROOT_TRANSACTION_TYPE=RTM.ROOT_TRANSACTION_TYPE    
                ,ARD.ROOT_CONTRACT_DETAIL_STATUS_CODE=RTM.ROOT_CONTRACT_DETAIL_STATUS_CODE    
                ,ARD.ROOT_CONTRACT_DETAIL_TYPE_CODE=RTM.ROOT_CONTRACT_DETAIL_TYPE_CODE    
                ,ARD.ROOT_CONTRACT_NUMBER=RTM.ROOT_CONTRACT_NUMBER    
                ,ARD.ROOT_ID_EP_CONTRACT_HEADER=RTM.ROOT_ID_EP_CONTRACT_HEADER    
                ,ARD.ROOT_CONTRACT_START_DATE=RTM.ROOT_CONTRACT_START_DATE    
                ,ARD.ROOT_ASSET_ID=RTM.ROOT_ASSET_ID    
                ,ARD.ROOT_RESIDUAL_AMOUNT=RTM.ROOT_RESIDUAL_AMOUNT    
         FROM [DATAHUBPMR].[ASSET_RAW_DETAILS] ARD    
              INNER JOIN     
              #ROOT_TBL_MIG(NOLOCK)RTM ON RTM.SEQUENCENUMBER=ARD.CONT_SEQUENCENUMBER    
             
    
------------------------------------------------------ END --------------------------------------------------    
    
----------------------------------------------- Update Root Contract information for non-migrated contracts or newly created contracts---------------------    
IF OBJECT_ID(N'TEMPDB..#ROOT_TBL_NONMIG')  IS NOT NULL    
   BEGIN    
   DROP TABLE #ROOT_TBL_NONMIG    
   END    
    
             SELECT     
                   CTR.SEQUENCENUMBER    
                  ,[DATAHUB_ODESSA].[ODH].LEASEFINANCEDETAILS.MATURITYDATE AS ROOT_CONTRACT_MATURITY_DATE    
                  ,CT.SEQUENCENUMBER AS ROOT_CONTRACT_NUMBER    
                  ,CTR.ORIGINALCONTRACTID AS ROOT_ID_EP_CONTRACT_HEADER    
                  ,[DATAHUB_ODESSA].[ODH].LEASEFINANCEDETAILS.COMMENCEMENTDATE AS ROOT_CONTRACT_START_DATE    
      INTO #ROOT_TBL_NONMIG FROM      
                      #CONTRACTS(NOLOCK) CTR     
       INNER JOIN    
                [DATAHUB_ODESSA].[ODH].CONTRACTS(NOLOCK) CT ON CTR.ORIGINALCONTRACTID=CT.ID AND CTR.ORIGINALCONTRACTID IS NOT NULL    
                INNER JOIN     
                [DATAHUB_ODESSA].[ODH].LEASEFINANCES(NOLOCK) ON [DATAHUB_ODESSA].[ODH].LEASEFINANCES.CONTRACTID=CT.ID AND ISCURRENT=1    
                INNER JOIN    
                [DATAHUB_ODESSA].[ODH].LEASEFINANCEDETAILS(NOLOCK) ON [DATAHUB_ODESSA].[ODH].LEASEFINANCES.ID=[DATAHUB_ODESSA].[ODH].LEASEFINANCEDETAILS.ID    
       WHERE CTR.ORIGINALCONTRACTID<>CTR.ID    
    
    
------------------------- Update information in SOURCE_ASSET_RAW_DETAILS table ----------------------    
                  UPDATE ARDS SET     
                          ARDS.ROOT_CONTRACT_MATURITY_DATE=RTM.ROOT_CONTRACT_MATURITY_DATE    
                         ,ARDS.ROOT_CONTRACT_NUMBER=RTM.ROOT_CONTRACT_NUMBER    
                         ,ARDS.ROOT_ID_EP_CONTRACT_HEADER=RTM.ROOT_ID_EP_CONTRACT_HEADER    
                         ,ARDS.ROOT_CONTRACT_START_DATE=RTM.ROOT_CONTRACT_START_DATE    
                  FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS] ARDS    
                       INNER JOIN     
                       #ROOT_TBL_NONMIG(NOLOCK)RTM ON RTM.SEQUENCENUMBER=ARDS.CONT_SEQUENCENUMBER AND ARDS.ROOT_CONTRACT_START_DATE IS NULL    
    
------------------------- Update information in ASSET_RAW_DETAILS table ----------------------    
                  UPDATE ARDS SET     
                          ARDS.ROOT_CONTRACT_MATURITY_DATE=RTM.ROOT_CONTRACT_MATURITY_DATE    
                         ,ARDS.ROOT_CONTRACT_NUMBER=RTM.ROOT_CONTRACT_NUMBER    
                         ,ARDS.ROOT_ID_EP_CONTRACT_HEADER=RTM.ROOT_ID_EP_CONTRACT_HEADER    
                         ,ARDS.ROOT_CONTRACT_START_DATE=RTM.ROOT_CONTRACT_START_DATE    
                  FROM [DATAHUBPMR].[ASSET_RAW_DETAILS] ARDS    
                       INNER JOIN     
                       #ROOT_TBL_NONMIG(NOLOCK)RTM ON RTM.SEQUENCENUMBER=ARDS.CONT_SEQUENCENUMBER AND ARDS.ROOT_CONTRACT_START_DATE IS NULL    
    
------------------------------------------------------ END --------------------------------------------------    
    
   
 ------------------------------ Remove old derived gen table    ---------------------------------------------------------    
IF OBJECT_ID(N'TEMPDB..#REM_DERIVED_GEN')  IS NOT NULL    
   BEGIN    
   DROP TABLE #REM_DERIVED_GEN    
   END    
    
SELECT ROWNUM,CONT_ID,AST_ID,DERIVED_GEN    
INTO #REM_DERIVED_GEN    
FROM     
(    
  SELECT ROW_NUMBER() OVER (PARTITION BY CONT_ID,AST_ID ORDER BY DERIVED_GEN DESC) AS ROWNUM,CONT_ID,AST_ID,DERIVED_GEN    
  FROM    
  (    
    SELECT DISTINCT CONT_ID,AST_ID,DERIVED_GEN FROM [DATAHUBPMR].[ASSET_RAW_DETAILS](NOLOCK)    
    UNION    
    SELECT DISTINCT CONT_ID,AST_ID,DERIVED_GEN FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS](NOLOCK)    
  )TBL_DR    
)UNIQUEDER_GEN    
WHERE ROWNUM>1    
    
DELETE FROM [DATAHUBPMR].[ASSET_RAW_DETAILS] WHERE ID IN(    
SELECT ISNULL(ARD.ID,0) AS ID FROM #REM_DERIVED_GEN DRG    
INNER JOIN     
[DATAHUBPMR].[ASSET_RAW_DETAILS](NOLOCK)ARD ON ARD.CONT_ID=DRG.CONT_ID AND ARD.AST_ID=DRG.AST_ID AND ARD.DERIVED_GEN=DRG.DERIVED_GEN    
)    
----------------------------------------------- Remove duplicate data on the basis of UID from SOURCE_ASSET_RAW_DETAILS ---------------------    
;WITH CTE_SRC    
AS    
(    
  SELECT ROW_NUMBER() OVER (PARTITION BY UID ORDER BY LASTREFRESHTIME DESC) AS ROWNUM,* FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS](NOLOCK) WHERE UID IN(SELECT UID FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS](NOLOCK) GROUP BY UID HAVING COUNT(1)>1)    
)    
    
DELETE FROM CTE_SRC WHERE ROWNUM>1    
--------------------------------------------------- END------------------------------------------------------------    
----------------------------------------------- Remove duplicate data on the basis of UID from ASSET_RAW_DETAILS---------------------    
;WITH CTE    
AS    
(    
  SELECT ROW_NUMBER() OVER (PARTITION BY UID ORDER BY LASTREFRESHTIME DESC) AS ROWNUM,* FROM [DATAHUBPMR].[ASSET_RAW_DETAILS](NOLOCK) WHERE UID IN(SELECT UID FROM [DATAHUBPMR].[ASSET_RAW_DETAILS](NOLOCK) GROUP BY UID HAVING COUNT(1)>1)    
)    
    
DELETE FROM CTE WHERE ROWNUM>1    
--------------------------------------------------- END------------------------------------------------------------    
    
----------------------------------------------- Update AggSTATUS ON ASSET_RAW_DETAILS table AS Arnold reccomandation---------------------    
UPDATE [DATAHUBPMR].[ASSET_RAW_DETAILS] SET AGGSTATUS=NULL,AGGSTATUS_CODE=NULL WHERE AGGSTATUS IN('EARLY-AE','EOL-AE')    
------------------------------------------------------ END --------------------------------------------------    
    
----------------------------------------------- Update AggSTATUS ON SOURCE_ASSET_RAW_DETAILS table AS Arnold reccomandation---------------------    
UPDATE [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS] SET AGGSTATUS=NULL,AGGSTATUS_CODE=NULL WHERE AGGSTATUS IN('EARLY-AE','EOL-AE')    
------------------------------------------------------ END --------------------------------------------------    
   
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'SOURCE_ASSET_RAW_DETAILS'  
,'Updates Compelted on SOURCE_ASSET_RAW_DETAILS for AGGSTATUS Column' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
--------------------------------------------------------------------------------------------------------------   
UPDATE ARDS SET     
ASSET_STATUS_CODE = RAA.ASSET_STATUS_CD    
,ARDS.AGGSTATUS= REPLACE(ARDS.AGGSTATUS, substring(AGGSTATUS,charindex('-',AGGSTATUS)+1, len(AGGSTATUS)), RAA.ASSET_STATUS_CD)     
,ARDS.AGGSTATUS_CODE =  REPLACE(ARDS.AGGSTATUS, substring(AGGSTATUS,charindex('-',AGGSTATUS)+1, len(AGGSTATUS)), RAA.ASSET_STATUS_CD)    
FROM [DATAHUBPMR].[ASSET_RAW_DETAILS] ARDS  
INNER JOIN   
DBO.REPORT_IDS_ACTIVE_ASSET(NOLOCK)RAA ON RAA.CD_ID=ARDS.AST_ID AND RAA.CH_ID=ARDS.CONT_ID  
WHERE  ARDS.ASSET_STATUS_CODE='UNKNOWN'  
--------------------------------------------------------------------------------------------------------------    
INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
CreatedOn  
,CreatedBy  
,ScriptName  
,SectionAsPerLogic  
)  
VALUES (  
getdate()  
,'PMR'  
,'SOURCE_ASSET_RAW_DETAILS'  
,'Updates Compelted on SOURCE_ASSET_RAW_DETAILS for ASSET_STATUS_CODE Column' + ':' + 'Completion%: ' + Cast((@totalCount * 100 / @TotalRD) AS VARCHAR(50)) + '% :' + cast(@totalCount AS VARCHAR(50)) + '/' + cast(@TotalRD AS VARCHAR(50))  
)  
  
  
---------------------------Update Vendor information in ASSET_RAW_DETAILS table  ------------------------------    
UPDATE ARD SET ARD.VENDOR_COMPANY_NAME=AH.VENDOR_COMPANY_NAME,ARD.VENDOR_COMPANY_ID=AH.VENDOR_COMPANY_ID    
from [DatahubPMR].[ASSET_RAW_DETAILS] ARD    
INNER JOIN #ASSET_HISTORIES AH ON ARD.CONT_SEQUENCENUMBER=AH.CONTRACT_NUMBER AND ARD.AST_ALIAS=AH.ASSETALIAS     
WHERE  (ISNULL(ARD.VENDOR_COMPANY_NAME,'')='' OR ISNULL(ARD.VENDOR_COMPANY_ID,'')='' OR ARD.VENDOR_COMPANY_NAME<>AH.VENDOR_COMPANY_NAME OR  ARD.VENDOR_COMPANY_ID<>AH.VENDOR_COMPANY_ID) AND  (ISNULL(AH.VENDOR_COMPANY_NAME,'')<>'' )     
---------------------------------------------------- END ------------------------------------------------------    
        
  
  
       SET @RowsProcessed = @RowsProcessed+ ISNULL((SELECT COUNT(*) FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS]),0)      
       SET @NumRowsInserted = ISNULL((SELECT COUNT(*) FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS]),0)    
    
         UPDATE           [dbo].[REPORT_LOGS]   
      
         SET   EndTime =@PICKUP_TO_DATE,    
         TimeTaken = convert(char(8),dateadd(s,datediff(s,@JOBSTARTEDEXECUTING,GETDATE()),'1900-1-1'),8),    
         RowsProcessed = @RowsProcessed,    
         RowsInserted = @NumRowsInserted,    
         RowsUpdated = @NumRowsUpdated,    
         RowsDeleted = 0,    
         StatusTypeId = 1    
         WHERE ReportLogId = @ReportLogId    
                             END TRY    
  
  
                             BEGIN CATCH    
           SET @RowsProcessed = 0    
              
           BEGIN    
           SET @RowsProcessed = ISNULL((SELECT COUNT(*) FROM [DATAHUBPMR].[SOURCE_ASSET_RAW_DETAILS]),0)    
           END    
    
           UPDATE              [dbo].[REPORT_LOGS]   
           SET                      EndTime = NULL,    
           TimeTaken = convert(char(8),dateadd(s,datediff(s,StartTime,GETDATE()),'1900-1-1'),8),    
           RowsProcessed = @RowsProcessed,    
           RowsInserted = 0,    
           RowsUpdated = 0,    
           RowsDeleted = 0,    
           StatusTypeId = -1,    
           IsError = 1,    
           ErrorMessage =  ERROR_MESSAGE()     
           WHERE ReportLogId = @ReportLogId    
                             END CATCH    
  
   
  
 DELETE  
 FROM #BATCHTBL  
  
 SELECT @error_handler = @@ERROR  
  ,@count_handler = @@ROWCOUNT  
  
 IF @error_handler <> 0  
 BEGIN  
  ROLLBACK  
   
  
  GOTO EndOnError  
 END  
 ELSE  
  PRINT CONVERT(VARCHAR, @count_handler) + ' records updated'  
  
 COMMIT TRAN ---Commit Tran  
  
 EndOnError:  
  
END  
  
  INSERT INTO [DIMN_20210430].[LogsForDataFixScriptExecution] (  
  CreatedOn  
  ,CreatedBy  
  ,ScriptName  
  ,SectionAsPerLogic  
  )  
 VALUES (  
  getdate()  
  ,'PMR'  
  ,'SOURCE_ASSET_RAW_DETAILS'  
  , 'Finished Data load on SOURCE_ASSET_RAW_DETAILS'   
  )  
  
END   
  